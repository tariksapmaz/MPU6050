
stm32f103c8-mpu6050-basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003074  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003180  08003180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003268  08003268  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08003268  08003268  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003268  08003268  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003268  08003268  00013268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800326c  0800326c  0001326c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08003270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000024  08003294  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08003294  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007da0  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013d4  00000000  00000000  00027ded  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006f8  00000000  00000000  000291c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000670  00000000  00000000  000298c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000134d5  00000000  00000000  00029f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000615a  00000000  00000000  0003d405  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006a22a  00000000  00000000  0004355f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ad789  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c14  00000000  00000000  000ad804  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08003168 	.word	0x08003168

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08003168 	.word	0x08003168

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b08c      	sub	sp, #48	; 0x30
 800060c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800060e:	f000 fa1d 	bl	8000a4c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000612:	f000 f855 	bl	80006c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000616:	f000 f8c7 	bl	80007a8 <MX_GPIO_Init>
	MX_I2C1_Init();
 800061a:	f000 f897 	bl	800074c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	// We defined our code after I2C Init...
	if (MPU6050Init(&hi2c1, AR4, GR500, SR1000Hz) == false) {
 800061e:	2307      	movs	r3, #7
 8000620:	2201      	movs	r2, #1
 8000622:	2101      	movs	r1, #1
 8000624:	4822      	ldr	r0, [pc, #136]	; (80006b0 <main+0xa8>)
 8000626:	f002 fb1d 	bl	8002c64 <MPU6050Init>
 800062a:	4603      	mov	r3, r0
 800062c:	f083 0301 	eor.w	r3, r3, #1
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2b00      	cmp	r3, #0
 8000634:	d008      	beq.n	8000648 <main+0x40>
		// Handle error if can't init.
		// You can see error code and string
		MPU6050_ErrorCode errorCode = MPU6050ErrorProperties.errorCode;
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <main+0xac>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *errorStr = MPU6050ErrorProperties.errorString;
 800063e:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <main+0xac>)
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	62bb      	str	r3, [r7, #40]	; 0x28
		Error_Handler();
 8000644:	f000 f908 	bl	8000858 <Error_Handler>
	while (1) {
		/*
		 * Read as much as you can,
		 * we don't care about sampling rate.
		 */
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET); // For measuring I2C process
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064e:	481a      	ldr	r0, [pc, #104]	; (80006b8 <main+0xb0>)
 8000650:	f000 fc9c 	bl	8000f8c <HAL_GPIO_WritePin>
		if (MPU6050ReadAccelValues(&hi2c1) == false) {
 8000654:	4816      	ldr	r0, [pc, #88]	; (80006b0 <main+0xa8>)
 8000656:	f002 fb9b 	bl	8002d90 <MPU6050ReadAccelValues>
 800065a:	4603      	mov	r3, r0
 800065c:	f083 0301 	eor.w	r3, r3, #1
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d008      	beq.n	8000678 <main+0x70>
			// Handle error if can't read.
			// You can see error code and string
			MPU6050_ErrorCode errorCode = MPU6050ErrorProperties.errorCode;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <main+0xac>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	72fb      	strb	r3, [r7, #11]
			const char *errorStr = MPU6050ErrorProperties.errorString;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <main+0xac>)
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	607b      	str	r3, [r7, #4]
			Error_Handler();
 8000672:	f000 f8f1 	bl	8000858 <Error_Handler>
 8000676:	e014      	b.n	80006a2 <main+0x9a>
		} else {
			// Get All Read Values
			float tempValue = MPU6050Properties.tempValue;
 8000678:	4b10      	ldr	r3, [pc, #64]	; (80006bc <main+0xb4>)
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	627b      	str	r3, [r7, #36]	; 0x24

			float xAccValue = MPU6050Properties.xAccValue;
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <main+0xb4>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	623b      	str	r3, [r7, #32]
			float yAccValue = MPU6050Properties.yAccValue;
 8000684:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <main+0xb4>)
 8000686:	69db      	ldr	r3, [r3, #28]
 8000688:	61fb      	str	r3, [r7, #28]
			float zAccValue = MPU6050Properties.zAccValue;
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <main+0xb4>)
 800068c:	6a1b      	ldr	r3, [r3, #32]
 800068e:	61bb      	str	r3, [r7, #24]

			float xGyroValue = MPU6050Properties.xGyroValue;
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <main+0xb4>)
 8000692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000694:	617b      	str	r3, [r7, #20]
			float yGyroValue = MPU6050Properties.yGyroValue;
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <main+0xb4>)
 8000698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800069a:	613b      	str	r3, [r7, #16]
			float zGyroValue = MPU6050Properties.zGyroValue;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <main+0xb4>)
 800069e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006a0:	60fb      	str	r3, [r7, #12]
		}
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET); // For measuring I2C process
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a8:	4803      	ldr	r0, [pc, #12]	; (80006b8 <main+0xb0>)
 80006aa:	f000 fc6f 	bl	8000f8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET); // For measuring I2C process
 80006ae:	e7cb      	b.n	8000648 <main+0x40>
 80006b0:	20000040 	.word	0x20000040
 80006b4:	200000c4 	.word	0x200000c4
 80006b8:	40011000 	.word	0x40011000
 80006bc:	20000094 	.word	0x20000094

080006c0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b090      	sub	sp, #64	; 0x40
 80006c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006c6:	f107 0318 	add.w	r3, r7, #24
 80006ca:	2228      	movs	r2, #40	; 0x28
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fd42 	bl	8003158 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e2:	2301      	movs	r3, #1
 80006e4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ea:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f4:	2302      	movs	r3, #2
 80006f6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006fc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000704:	f107 0318 	add.w	r3, r7, #24
 8000708:	4618      	mov	r0, r3
 800070a:	f001 fcd5 	bl	80020b8 <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x58>
		Error_Handler();
 8000714:	f000 f8a0 	bl	8000858 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071c:	2302      	movs	r3, #2
 800071e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000728:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2102      	movs	r1, #2
 8000732:	4618      	mov	r0, r3
 8000734:	f001 ff40 	bl	80025b8 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x82>
		Error_Handler();
 800073e:	f000 f88b 	bl	8000858 <Error_Handler>
	}
}
 8000742:	bf00      	nop
 8000744:	3740      	adds	r7, #64	; 0x40
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_I2C1_Init+0x50>)
 8000752:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <MX_I2C1_Init+0x54>)
 8000754:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_I2C1_Init+0x50>)
 8000758:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <MX_I2C1_Init+0x58>)
 800075a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_I2C1_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_I2C1_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_I2C1_Init+0x50>)
 800076a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800076e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <MX_I2C1_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_I2C1_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_I2C1_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_I2C1_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_I2C1_Init+0x50>)
 800078a:	f000 fc17 	bl	8000fbc <HAL_I2C_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000794:	f000 f860 	bl	8000858 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000040 	.word	0x20000040
 80007a0:	40005400 	.word	0x40005400
 80007a4:	00061a80 	.word	0x00061a80

080007a8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007ae:	f107 0310 	add.w	r3, r7, #16
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007bc:	4b24      	ldr	r3, [pc, #144]	; (8000850 <MX_GPIO_Init+0xa8>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a23      	ldr	r2, [pc, #140]	; (8000850 <MX_GPIO_Init+0xa8>)
 80007c2:	f043 0310 	orr.w	r3, r3, #16
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b21      	ldr	r3, [pc, #132]	; (8000850 <MX_GPIO_Init+0xa8>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f003 0310 	and.w	r3, r3, #16
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007d4:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <MX_GPIO_Init+0xa8>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a1d      	ldr	r2, [pc, #116]	; (8000850 <MX_GPIO_Init+0xa8>)
 80007da:	f043 0320 	orr.w	r3, r3, #32
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_GPIO_Init+0xa8>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0320 	and.w	r3, r3, #32
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_GPIO_Init+0xa8>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a17      	ldr	r2, [pc, #92]	; (8000850 <MX_GPIO_Init+0xa8>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_GPIO_Init+0xa8>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0304 	and.w	r3, r3, #4
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_GPIO_Init+0xa8>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a11      	ldr	r2, [pc, #68]	; (8000850 <MX_GPIO_Init+0xa8>)
 800080a:	f043 0308 	orr.w	r3, r3, #8
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_GPIO_Init+0xa8>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0308 	and.w	r3, r3, #8
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000822:	480c      	ldr	r0, [pc, #48]	; (8000854 <MX_GPIO_Init+0xac>)
 8000824:	f000 fbb2 	bl	8000f8c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8000828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800082c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2302      	movs	r3, #2
 8000838:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	4619      	mov	r1, r3
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_GPIO_Init+0xac>)
 8000842:	f000 fa49 	bl	8000cd8 <HAL_GPIO_Init>

}
 8000846:	bf00      	nop
 8000848:	3720      	adds	r7, #32
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000
 8000854:	40011000 	.word	0x40011000

08000858 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <HAL_MspInit+0x5c>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <HAL_MspInit+0x5c>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6193      	str	r3, [r2, #24]
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <HAL_MspInit+0x5c>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <HAL_MspInit+0x5c>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <HAL_MspInit+0x5c>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088c:	61d3      	str	r3, [r2, #28]
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <HAL_MspInit+0x5c>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <HAL_MspInit+0x60>)
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <HAL_MspInit+0x60>)
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	40021000 	.word	0x40021000
 80008c4:	40010000 	.word	0x40010000

080008c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a15      	ldr	r2, [pc, #84]	; (8000938 <HAL_I2C_MspInit+0x70>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d123      	bne.n	8000930 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <HAL_I2C_MspInit+0x74>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a13      	ldr	r2, [pc, #76]	; (800093c <HAL_I2C_MspInit+0x74>)
 80008ee:	f043 0308 	orr.w	r3, r3, #8
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_I2C_MspInit+0x74>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0308 	and.w	r3, r3, #8
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000900:	23c0      	movs	r3, #192	; 0xc0
 8000902:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000904:	2312      	movs	r3, #18
 8000906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4619      	mov	r1, r3
 8000912:	480b      	ldr	r0, [pc, #44]	; (8000940 <HAL_I2C_MspInit+0x78>)
 8000914:	f000 f9e0 	bl	8000cd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <HAL_I2C_MspInit+0x74>)
 800091a:	69db      	ldr	r3, [r3, #28]
 800091c:	4a07      	ldr	r2, [pc, #28]	; (800093c <HAL_I2C_MspInit+0x74>)
 800091e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000922:	61d3      	str	r3, [r2, #28]
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <HAL_I2C_MspInit+0x74>)
 8000926:	69db      	ldr	r3, [r3, #28]
 8000928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000930:	bf00      	nop
 8000932:	3720      	adds	r7, #32
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40005400 	.word	0x40005400
 800093c:	40021000 	.word	0x40021000
 8000940:	40010c00 	.word	0x40010c00

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <HardFault_Handler+0x4>

08000956 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <MemManage_Handler+0x4>

0800095c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <BusFault_Handler+0x4>

08000962 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <UsageFault_Handler+0x4>

08000968 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr

0800098c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000990:	f000 f8a2 	bl	8000ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800099c:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <SystemInit+0x5c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a14      	ldr	r2, [pc, #80]	; (80009f4 <SystemInit+0x5c>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <SystemInit+0x5c>)
 80009aa:	685a      	ldr	r2, [r3, #4]
 80009ac:	4911      	ldr	r1, [pc, #68]	; (80009f4 <SystemInit+0x5c>)
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <SystemInit+0x60>)
 80009b0:	4013      	ands	r3, r2
 80009b2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <SystemInit+0x5c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <SystemInit+0x5c>)
 80009ba:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80009be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009c2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009c4:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <SystemInit+0x5c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <SystemInit+0x5c>)
 80009ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ce:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <SystemInit+0x5c>)
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <SystemInit+0x5c>)
 80009d6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80009da:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <SystemInit+0x5c>)
 80009de:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80009e2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <SystemInit+0x64>)
 80009e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009ea:	609a      	str	r2, [r3, #8]
#endif 
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	40021000 	.word	0x40021000
 80009f8:	f8ff0000 	.word	0xf8ff0000
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a00:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a02:	e003      	b.n	8000a0c <LoopCopyDataInit>

08000a04 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a06:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a08:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a0a:	3104      	adds	r1, #4

08000a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a0c:	480a      	ldr	r0, [pc, #40]	; (8000a38 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a10:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a12:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a14:	d3f6      	bcc.n	8000a04 <CopyDataInit>
  ldr r2, =_sbss
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a18:	e002      	b.n	8000a20 <LoopFillZerobss>

08000a1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a1c:	f842 3b04 	str.w	r3, [r2], #4

08000a20 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a22:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a24:	d3f9      	bcc.n	8000a1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a26:	f7ff ffb7 	bl	8000998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2a:	f002 fb71 	bl	8003110 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a2e:	f7ff fdeb 	bl	8000608 <main>
  bx lr
 8000a32:	4770      	bx	lr
  ldr r3, =_sidata
 8000a34:	08003270 	.word	0x08003270
  ldr r0, =_sdata
 8000a38:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a3c:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 8000a40:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 8000a44:	200000d0 	.word	0x200000d0

08000a48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC1_2_IRQHandler>
	...

08000a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_Init+0x28>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <HAL_Init+0x28>)
 8000a56:	f043 0310 	orr.w	r3, r3, #16
 8000a5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f000 f907 	bl	8000c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a62:	2000      	movs	r0, #0
 8000a64:	f000 f808 	bl	8000a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a68:	f7ff fefc 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40022000 	.word	0x40022000

08000a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_InitTick+0x54>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_InitTick+0x58>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f911 	bl	8000cbe <HAL_SYSTICK_Config>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00e      	b.n	8000ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	d80a      	bhi.n	8000ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f000 f8e7 	bl	8000c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab8:	4a06      	ldr	r2, [pc, #24]	; (8000ad4 <HAL_InitTick+0x5c>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e000      	b.n	8000ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000004 	.word	0x20000004

08000ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_IncTick+0x1c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_IncTick+0x20>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a03      	ldr	r2, [pc, #12]	; (8000af8 <HAL_IncTick+0x20>)
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	20000008 	.word	0x20000008
 8000af8:	200000cc 	.word	0x200000cc

08000afc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b02      	ldr	r3, [pc, #8]	; (8000b0c <HAL_GetTick+0x10>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	200000cc 	.word	0x200000cc

08000b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b42:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	60d3      	str	r3, [r2, #12]
}
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <__NVIC_GetPriorityGrouping+0x18>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	f003 0307 	and.w	r3, r3, #7
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db0a      	blt.n	8000b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	490c      	ldr	r1, [pc, #48]	; (8000bc0 <__NVIC_SetPriority+0x4c>)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	0112      	lsls	r2, r2, #4
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	440b      	add	r3, r1
 8000b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b9c:	e00a      	b.n	8000bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4908      	ldr	r1, [pc, #32]	; (8000bc4 <__NVIC_SetPriority+0x50>)
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	3b04      	subs	r3, #4
 8000bac:	0112      	lsls	r2, r2, #4
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	440b      	add	r3, r1
 8000bb2:	761a      	strb	r2, [r3, #24]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000e100 	.word	0xe000e100
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	; 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f1c3 0307 	rsb	r3, r3, #7
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	bf28      	it	cs
 8000be6:	2304      	movcs	r3, #4
 8000be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3304      	adds	r3, #4
 8000bee:	2b06      	cmp	r3, #6
 8000bf0:	d902      	bls.n	8000bf8 <NVIC_EncodePriority+0x30>
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3b03      	subs	r3, #3
 8000bf6:	e000      	b.n	8000bfa <NVIC_EncodePriority+0x32>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43da      	mvns	r2, r3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c10:	f04f 31ff 	mov.w	r1, #4294967295
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43d9      	mvns	r1, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	4313      	orrs	r3, r2
         );
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3724      	adds	r7, #36	; 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr

08000c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c3c:	d301      	bcc.n	8000c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00f      	b.n	8000c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <SysTick_Config+0x40>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f7ff ff90 	bl	8000b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <SysTick_Config+0x40>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5a:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <SysTick_Config+0x40>)
 8000c5c:	2207      	movs	r2, #7
 8000c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	e000e010 	.word	0xe000e010

08000c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff49 	bl	8000b10 <__NVIC_SetPriorityGrouping>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c98:	f7ff ff5e 	bl	8000b58 <__NVIC_GetPriorityGrouping>
 8000c9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	6978      	ldr	r0, [r7, #20]
 8000ca4:	f7ff ff90 	bl	8000bc8 <NVIC_EncodePriority>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff5f 	bl	8000b74 <__NVIC_SetPriority>
}
 8000cb6:	bf00      	nop
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff ffb0 	bl	8000c2c <SysTick_Config>
 8000ccc:	4603      	mov	r3, r0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b08b      	sub	sp, #44	; 0x2c
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cea:	e127      	b.n	8000f3c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cec:	2201      	movs	r2, #1
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	69fa      	ldr	r2, [r7, #28]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	f040 8116 	bne.w	8000f36 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b12      	cmp	r3, #18
 8000d10:	d034      	beq.n	8000d7c <HAL_GPIO_Init+0xa4>
 8000d12:	2b12      	cmp	r3, #18
 8000d14:	d80d      	bhi.n	8000d32 <HAL_GPIO_Init+0x5a>
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d02b      	beq.n	8000d72 <HAL_GPIO_Init+0x9a>
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d804      	bhi.n	8000d28 <HAL_GPIO_Init+0x50>
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d031      	beq.n	8000d86 <HAL_GPIO_Init+0xae>
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d01c      	beq.n	8000d60 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d26:	e048      	b.n	8000dba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d28:	2b03      	cmp	r3, #3
 8000d2a:	d043      	beq.n	8000db4 <HAL_GPIO_Init+0xdc>
 8000d2c:	2b11      	cmp	r3, #17
 8000d2e:	d01b      	beq.n	8000d68 <HAL_GPIO_Init+0x90>
          break;
 8000d30:	e043      	b.n	8000dba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d32:	4a89      	ldr	r2, [pc, #548]	; (8000f58 <HAL_GPIO_Init+0x280>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d026      	beq.n	8000d86 <HAL_GPIO_Init+0xae>
 8000d38:	4a87      	ldr	r2, [pc, #540]	; (8000f58 <HAL_GPIO_Init+0x280>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d806      	bhi.n	8000d4c <HAL_GPIO_Init+0x74>
 8000d3e:	4a87      	ldr	r2, [pc, #540]	; (8000f5c <HAL_GPIO_Init+0x284>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d020      	beq.n	8000d86 <HAL_GPIO_Init+0xae>
 8000d44:	4a86      	ldr	r2, [pc, #536]	; (8000f60 <HAL_GPIO_Init+0x288>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d01d      	beq.n	8000d86 <HAL_GPIO_Init+0xae>
          break;
 8000d4a:	e036      	b.n	8000dba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d4c:	4a85      	ldr	r2, [pc, #532]	; (8000f64 <HAL_GPIO_Init+0x28c>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d019      	beq.n	8000d86 <HAL_GPIO_Init+0xae>
 8000d52:	4a85      	ldr	r2, [pc, #532]	; (8000f68 <HAL_GPIO_Init+0x290>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d016      	beq.n	8000d86 <HAL_GPIO_Init+0xae>
 8000d58:	4a84      	ldr	r2, [pc, #528]	; (8000f6c <HAL_GPIO_Init+0x294>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d013      	beq.n	8000d86 <HAL_GPIO_Init+0xae>
          break;
 8000d5e:	e02c      	b.n	8000dba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	623b      	str	r3, [r7, #32]
          break;
 8000d66:	e028      	b.n	8000dba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	623b      	str	r3, [r7, #32]
          break;
 8000d70:	e023      	b.n	8000dba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	3308      	adds	r3, #8
 8000d78:	623b      	str	r3, [r7, #32]
          break;
 8000d7a:	e01e      	b.n	8000dba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	330c      	adds	r3, #12
 8000d82:	623b      	str	r3, [r7, #32]
          break;
 8000d84:	e019      	b.n	8000dba <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d102      	bne.n	8000d94 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d8e:	2304      	movs	r3, #4
 8000d90:	623b      	str	r3, [r7, #32]
          break;
 8000d92:	e012      	b.n	8000dba <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d105      	bne.n	8000da8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d9c:	2308      	movs	r3, #8
 8000d9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69fa      	ldr	r2, [r7, #28]
 8000da4:	611a      	str	r2, [r3, #16]
          break;
 8000da6:	e008      	b.n	8000dba <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000da8:	2308      	movs	r3, #8
 8000daa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69fa      	ldr	r2, [r7, #28]
 8000db0:	615a      	str	r2, [r3, #20]
          break;
 8000db2:	e002      	b.n	8000dba <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000db4:	2300      	movs	r3, #0
 8000db6:	623b      	str	r3, [r7, #32]
          break;
 8000db8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	2bff      	cmp	r3, #255	; 0xff
 8000dbe:	d801      	bhi.n	8000dc4 <HAL_GPIO_Init+0xec>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	e001      	b.n	8000dc8 <HAL_GPIO_Init+0xf0>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	2bff      	cmp	r3, #255	; 0xff
 8000dce:	d802      	bhi.n	8000dd6 <HAL_GPIO_Init+0xfe>
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	e002      	b.n	8000ddc <HAL_GPIO_Init+0x104>
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	3b08      	subs	r3, #8
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	210f      	movs	r1, #15
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	401a      	ands	r2, r3
 8000dee:	6a39      	ldr	r1, [r7, #32]
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	431a      	orrs	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f000 8096 	beq.w	8000f36 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e0a:	4b59      	ldr	r3, [pc, #356]	; (8000f70 <HAL_GPIO_Init+0x298>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	4a58      	ldr	r2, [pc, #352]	; (8000f70 <HAL_GPIO_Init+0x298>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6193      	str	r3, [r2, #24]
 8000e16:	4b56      	ldr	r3, [pc, #344]	; (8000f70 <HAL_GPIO_Init+0x298>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e22:	4a54      	ldr	r2, [pc, #336]	; (8000f74 <HAL_GPIO_Init+0x29c>)
 8000e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e26:	089b      	lsrs	r3, r3, #2
 8000e28:	3302      	adds	r3, #2
 8000e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	220f      	movs	r2, #15
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	4013      	ands	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4b      	ldr	r2, [pc, #300]	; (8000f78 <HAL_GPIO_Init+0x2a0>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d013      	beq.n	8000e76 <HAL_GPIO_Init+0x19e>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4a      	ldr	r2, [pc, #296]	; (8000f7c <HAL_GPIO_Init+0x2a4>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d00d      	beq.n	8000e72 <HAL_GPIO_Init+0x19a>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a49      	ldr	r2, [pc, #292]	; (8000f80 <HAL_GPIO_Init+0x2a8>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d007      	beq.n	8000e6e <HAL_GPIO_Init+0x196>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a48      	ldr	r2, [pc, #288]	; (8000f84 <HAL_GPIO_Init+0x2ac>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d101      	bne.n	8000e6a <HAL_GPIO_Init+0x192>
 8000e66:	2303      	movs	r3, #3
 8000e68:	e006      	b.n	8000e78 <HAL_GPIO_Init+0x1a0>
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	e004      	b.n	8000e78 <HAL_GPIO_Init+0x1a0>
 8000e6e:	2302      	movs	r3, #2
 8000e70:	e002      	b.n	8000e78 <HAL_GPIO_Init+0x1a0>
 8000e72:	2301      	movs	r3, #1
 8000e74:	e000      	b.n	8000e78 <HAL_GPIO_Init+0x1a0>
 8000e76:	2300      	movs	r3, #0
 8000e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e7a:	f002 0203 	and.w	r2, r2, #3
 8000e7e:	0092      	lsls	r2, r2, #2
 8000e80:	4093      	lsls	r3, r2
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e88:	493a      	ldr	r1, [pc, #232]	; (8000f74 <HAL_GPIO_Init+0x29c>)
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d006      	beq.n	8000eb0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ea2:	4b39      	ldr	r3, [pc, #228]	; (8000f88 <HAL_GPIO_Init+0x2b0>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	4938      	ldr	r1, [pc, #224]	; (8000f88 <HAL_GPIO_Init+0x2b0>)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	600b      	str	r3, [r1, #0]
 8000eae:	e006      	b.n	8000ebe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000eb0:	4b35      	ldr	r3, [pc, #212]	; (8000f88 <HAL_GPIO_Init+0x2b0>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	4933      	ldr	r1, [pc, #204]	; (8000f88 <HAL_GPIO_Init+0x2b0>)
 8000eba:	4013      	ands	r3, r2
 8000ebc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d006      	beq.n	8000ed8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000eca:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <HAL_GPIO_Init+0x2b0>)
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	492e      	ldr	r1, [pc, #184]	; (8000f88 <HAL_GPIO_Init+0x2b0>)
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	604b      	str	r3, [r1, #4]
 8000ed6:	e006      	b.n	8000ee6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ed8:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <HAL_GPIO_Init+0x2b0>)
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	4929      	ldr	r1, [pc, #164]	; (8000f88 <HAL_GPIO_Init+0x2b0>)
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d006      	beq.n	8000f00 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ef2:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <HAL_GPIO_Init+0x2b0>)
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	4924      	ldr	r1, [pc, #144]	; (8000f88 <HAL_GPIO_Init+0x2b0>)
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	608b      	str	r3, [r1, #8]
 8000efe:	e006      	b.n	8000f0e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <HAL_GPIO_Init+0x2b0>)
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	491f      	ldr	r1, [pc, #124]	; (8000f88 <HAL_GPIO_Init+0x2b0>)
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d006      	beq.n	8000f28 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f1a:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <HAL_GPIO_Init+0x2b0>)
 8000f1c:	68da      	ldr	r2, [r3, #12]
 8000f1e:	491a      	ldr	r1, [pc, #104]	; (8000f88 <HAL_GPIO_Init+0x2b0>)
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	60cb      	str	r3, [r1, #12]
 8000f26:	e006      	b.n	8000f36 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f28:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <HAL_GPIO_Init+0x2b0>)
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	4915      	ldr	r1, [pc, #84]	; (8000f88 <HAL_GPIO_Init+0x2b0>)
 8000f32:	4013      	ands	r3, r2
 8000f34:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	3301      	adds	r3, #1
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	fa22 f303 	lsr.w	r3, r2, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f47f aed0 	bne.w	8000cec <HAL_GPIO_Init+0x14>
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	372c      	adds	r7, #44	; 0x2c
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	10210000 	.word	0x10210000
 8000f5c:	10110000 	.word	0x10110000
 8000f60:	10120000 	.word	0x10120000
 8000f64:	10310000 	.word	0x10310000
 8000f68:	10320000 	.word	0x10320000
 8000f6c:	10220000 	.word	0x10220000
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40010000 	.word	0x40010000
 8000f78:	40010800 	.word	0x40010800
 8000f7c:	40010c00 	.word	0x40010c00
 8000f80:	40011000 	.word	0x40011000
 8000f84:	40011400 	.word	0x40011400
 8000f88:	40010400 	.word	0x40010400

08000f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f9c:	787b      	ldrb	r3, [r7, #1]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fa2:	887a      	ldrh	r2, [r7, #2]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fa8:	e003      	b.n	8000fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000faa:	887b      	ldrh	r3, [r7, #2]
 8000fac:	041a      	lsls	r2, r3, #16
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	611a      	str	r2, [r3, #16]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr

08000fbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e10f      	b.n	80011ee <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d106      	bne.n	8000fe8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff fc70 	bl	80008c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2224      	movs	r2, #36	; 0x24
 8000fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 0201 	bic.w	r2, r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001000:	f001 fc30 	bl	8002864 <HAL_RCC_GetPCLK1Freq>
 8001004:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	4a7b      	ldr	r2, [pc, #492]	; (80011f8 <HAL_I2C_Init+0x23c>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d807      	bhi.n	8001020 <HAL_I2C_Init+0x64>
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4a7a      	ldr	r2, [pc, #488]	; (80011fc <HAL_I2C_Init+0x240>)
 8001014:	4293      	cmp	r3, r2
 8001016:	bf94      	ite	ls
 8001018:	2301      	movls	r3, #1
 800101a:	2300      	movhi	r3, #0
 800101c:	b2db      	uxtb	r3, r3
 800101e:	e006      	b.n	800102e <HAL_I2C_Init+0x72>
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4a77      	ldr	r2, [pc, #476]	; (8001200 <HAL_I2C_Init+0x244>)
 8001024:	4293      	cmp	r3, r2
 8001026:	bf94      	ite	ls
 8001028:	2301      	movls	r3, #1
 800102a:	2300      	movhi	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e0db      	b.n	80011ee <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4a72      	ldr	r2, [pc, #456]	; (8001204 <HAL_I2C_Init+0x248>)
 800103a:	fba2 2303 	umull	r2, r3, r2, r3
 800103e:	0c9b      	lsrs	r3, r3, #18
 8001040:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	430a      	orrs	r2, r1
 8001054:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	4a64      	ldr	r2, [pc, #400]	; (80011f8 <HAL_I2C_Init+0x23c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d802      	bhi.n	8001070 <HAL_I2C_Init+0xb4>
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	3301      	adds	r3, #1
 800106e:	e009      	b.n	8001084 <HAL_I2C_Init+0xc8>
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001076:	fb02 f303 	mul.w	r3, r2, r3
 800107a:	4a63      	ldr	r2, [pc, #396]	; (8001208 <HAL_I2C_Init+0x24c>)
 800107c:	fba2 2303 	umull	r2, r3, r2, r3
 8001080:	099b      	lsrs	r3, r3, #6
 8001082:	3301      	adds	r3, #1
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	6812      	ldr	r2, [r2, #0]
 8001088:	430b      	orrs	r3, r1
 800108a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001096:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	4956      	ldr	r1, [pc, #344]	; (80011f8 <HAL_I2C_Init+0x23c>)
 80010a0:	428b      	cmp	r3, r1
 80010a2:	d80d      	bhi.n	80010c0 <HAL_I2C_Init+0x104>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	1e59      	subs	r1, r3, #1
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80010b2:	3301      	adds	r3, #1
 80010b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010b8:	2b04      	cmp	r3, #4
 80010ba:	bf38      	it	cc
 80010bc:	2304      	movcc	r3, #4
 80010be:	e04f      	b.n	8001160 <HAL_I2C_Init+0x1a4>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d111      	bne.n	80010ec <HAL_I2C_Init+0x130>
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	1e58      	subs	r0, r3, #1
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6859      	ldr	r1, [r3, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	440b      	add	r3, r1
 80010d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80010da:	3301      	adds	r3, #1
 80010dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	bf0c      	ite	eq
 80010e4:	2301      	moveq	r3, #1
 80010e6:	2300      	movne	r3, #0
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	e012      	b.n	8001112 <HAL_I2C_Init+0x156>
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	1e58      	subs	r0, r3, #1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6859      	ldr	r1, [r3, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	0099      	lsls	r1, r3, #2
 80010fc:	440b      	add	r3, r1
 80010fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001102:	3301      	adds	r3, #1
 8001104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001108:	2b00      	cmp	r3, #0
 800110a:	bf0c      	ite	eq
 800110c:	2301      	moveq	r3, #1
 800110e:	2300      	movne	r3, #0
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_I2C_Init+0x15e>
 8001116:	2301      	movs	r3, #1
 8001118:	e022      	b.n	8001160 <HAL_I2C_Init+0x1a4>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10e      	bne.n	8001140 <HAL_I2C_Init+0x184>
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	1e58      	subs	r0, r3, #1
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6859      	ldr	r1, [r3, #4]
 800112a:	460b      	mov	r3, r1
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	440b      	add	r3, r1
 8001130:	fbb0 f3f3 	udiv	r3, r0, r3
 8001134:	3301      	adds	r3, #1
 8001136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800113a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800113e:	e00f      	b.n	8001160 <HAL_I2C_Init+0x1a4>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	1e58      	subs	r0, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6859      	ldr	r1, [r3, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	0099      	lsls	r1, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	fbb0 f3f3 	udiv	r3, r0, r3
 8001156:	3301      	adds	r3, #1
 8001158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800115c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	6809      	ldr	r1, [r1, #0]
 8001164:	4313      	orrs	r3, r2
 8001166:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69da      	ldr	r2, [r3, #28]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a1b      	ldr	r3, [r3, #32]
 800117a:	431a      	orrs	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	430a      	orrs	r2, r1
 8001182:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800118e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	6911      	ldr	r1, [r2, #16]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68d2      	ldr	r2, [r2, #12]
 800119a:	4311      	orrs	r1, r2
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	430b      	orrs	r3, r1
 80011a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	695a      	ldr	r2, [r3, #20]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	431a      	orrs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	430a      	orrs	r2, r1
 80011be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 0201 	orr.w	r2, r2, #1
 80011ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2220      	movs	r2, #32
 80011da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	000186a0 	.word	0x000186a0
 80011fc:	001e847f 	.word	0x001e847f
 8001200:	003d08ff 	.word	0x003d08ff
 8001204:	431bde83 	.word	0x431bde83
 8001208:	10624dd3 	.word	0x10624dd3

0800120c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af02      	add	r7, sp, #8
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	461a      	mov	r2, r3
 8001218:	460b      	mov	r3, r1
 800121a:	817b      	strh	r3, [r7, #10]
 800121c:	4613      	mov	r3, r2
 800121e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001220:	f7ff fc6c 	bl	8000afc <HAL_GetTick>
 8001224:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b20      	cmp	r3, #32
 8001230:	f040 80e0 	bne.w	80013f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2319      	movs	r3, #25
 800123a:	2201      	movs	r2, #1
 800123c:	4970      	ldr	r1, [pc, #448]	; (8001400 <HAL_I2C_Master_Transmit+0x1f4>)
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f000 fd5e 	bl	8001d00 <I2C_WaitOnFlagUntilTimeout>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800124a:	2302      	movs	r3, #2
 800124c:	e0d3      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001254:	2b01      	cmp	r3, #1
 8001256:	d101      	bne.n	800125c <HAL_I2C_Master_Transmit+0x50>
 8001258:	2302      	movs	r3, #2
 800125a:	e0cc      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1ea>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b01      	cmp	r3, #1
 8001270:	d007      	beq.n	8001282 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f042 0201 	orr.w	r2, r2, #1
 8001280:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001290:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2221      	movs	r2, #33	; 0x21
 8001296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2210      	movs	r2, #16
 800129e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2200      	movs	r2, #0
 80012a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	893a      	ldrh	r2, [r7, #8]
 80012b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4a50      	ldr	r2, [pc, #320]	; (8001404 <HAL_I2C_Master_Transmit+0x1f8>)
 80012c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80012c4:	8979      	ldrh	r1, [r7, #10]
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	6a3a      	ldr	r2, [r7, #32]
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f000 fbec 	bl	8001aa8 <I2C_MasterRequestWrite>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e08d      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80012f0:	e066      	b.n	80013c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	6a39      	ldr	r1, [r7, #32]
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f000 fdd8 	bl	8001eac <I2C_WaitOnTXEFlagUntilTimeout>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00d      	beq.n	800131e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	2b04      	cmp	r3, #4
 8001308:	d107      	bne.n	800131a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001318:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e06b      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001322:	781a      	ldrb	r2, [r3, #0]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001338:	b29b      	uxth	r3, r3
 800133a:	3b01      	subs	r3, #1
 800133c:	b29a      	uxth	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001346:	3b01      	subs	r3, #1
 8001348:	b29a      	uxth	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	2b04      	cmp	r3, #4
 800135a:	d11b      	bne.n	8001394 <HAL_I2C_Master_Transmit+0x188>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001360:	2b00      	cmp	r3, #0
 8001362:	d017      	beq.n	8001394 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	781a      	ldrb	r2, [r3, #0]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800137e:	b29b      	uxth	r3, r3
 8001380:	3b01      	subs	r3, #1
 8001382:	b29a      	uxth	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800138c:	3b01      	subs	r3, #1
 800138e:	b29a      	uxth	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	6a39      	ldr	r1, [r7, #32]
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f000 fdc8 	bl	8001f2e <I2C_WaitOnBTFFlagUntilTimeout>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00d      	beq.n	80013c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d107      	bne.n	80013bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e01a      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d194      	bne.n	80012f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2220      	movs	r2, #32
 80013dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80013f0:	2300      	movs	r3, #0
 80013f2:	e000      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80013f4:	2302      	movs	r3, #2
  }
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	00100002 	.word	0x00100002
 8001404:	ffff0000 	.word	0xffff0000

08001408 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08c      	sub	sp, #48	; 0x30
 800140c:	af02      	add	r7, sp, #8
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	461a      	mov	r2, r3
 8001414:	460b      	mov	r3, r1
 8001416:	817b      	strh	r3, [r7, #10]
 8001418:	4613      	mov	r3, r2
 800141a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff fb6e 	bl	8000afc <HAL_GetTick>
 8001420:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b20      	cmp	r3, #32
 800142c:	f040 8213 	bne.w	8001856 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2319      	movs	r3, #25
 8001436:	2201      	movs	r2, #1
 8001438:	497e      	ldr	r1, [pc, #504]	; (8001634 <HAL_I2C_Master_Receive+0x22c>)
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f000 fc60 	bl	8001d00 <I2C_WaitOnFlagUntilTimeout>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001446:	2302      	movs	r3, #2
 8001448:	e206      	b.n	8001858 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001450:	2b01      	cmp	r3, #1
 8001452:	d101      	bne.n	8001458 <HAL_I2C_Master_Receive+0x50>
 8001454:	2302      	movs	r3, #2
 8001456:	e1ff      	b.n	8001858 <HAL_I2C_Master_Receive+0x450>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b01      	cmp	r3, #1
 800146c:	d007      	beq.n	800147e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f042 0201 	orr.w	r2, r2, #1
 800147c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800148c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2222      	movs	r2, #34	; 0x22
 8001492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2210      	movs	r2, #16
 800149a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	893a      	ldrh	r2, [r7, #8]
 80014ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	4a5e      	ldr	r2, [pc, #376]	; (8001638 <HAL_I2C_Master_Receive+0x230>)
 80014be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80014c0:	8979      	ldrh	r1, [r7, #10]
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f000 fb64 	bl	8001b94 <I2C_MasterRequestRead>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e1c0      	b.n	8001858 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d113      	bne.n	8001506 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	623b      	str	r3, [r7, #32]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	623b      	str	r3, [r7, #32]
 80014f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	e194      	b.n	8001830 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800150a:	2b01      	cmp	r3, #1
 800150c:	d11d      	bne.n	800154a <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800151c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800151e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	61fb      	str	r3, [r7, #28]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	61fb      	str	r3, [r7, #28]
 8001534:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001544:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001546:	b662      	cpsie	i
 8001548:	e172      	b.n	8001830 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800154e:	2b02      	cmp	r3, #2
 8001550:	d11d      	bne.n	800158e <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001560:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001562:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001564:	2300      	movs	r3, #0
 8001566:	61bb      	str	r3, [r7, #24]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	61bb      	str	r3, [r7, #24]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	61bb      	str	r3, [r7, #24]
 8001578:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001588:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800158a:	b662      	cpsie	i
 800158c:	e150      	b.n	8001830 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800159c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80015b4:	e13c      	b.n	8001830 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	f200 80f5 	bhi.w	80017aa <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d123      	bne.n	8001610 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f000 fcef 	bl	8001fb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e13d      	b.n	8001858 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	691a      	ldr	r2, [r3, #16]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f8:	3b01      	subs	r3, #1
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001604:	b29b      	uxth	r3, r3
 8001606:	3b01      	subs	r3, #1
 8001608:	b29a      	uxth	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800160e:	e10f      	b.n	8001830 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001614:	2b02      	cmp	r3, #2
 8001616:	d150      	bne.n	80016ba <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161e:	2200      	movs	r2, #0
 8001620:	4906      	ldr	r1, [pc, #24]	; (800163c <HAL_I2C_Master_Receive+0x234>)
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f000 fb6c 	bl	8001d00 <I2C_WaitOnFlagUntilTimeout>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d008      	beq.n	8001640 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e112      	b.n	8001858 <HAL_I2C_Master_Receive+0x450>
 8001632:	bf00      	nop
 8001634:	00100002 	.word	0x00100002
 8001638:	ffff0000 	.word	0xffff0000
 800163c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001640:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001650:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	691a      	ldr	r2, [r3, #16]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800166e:	3b01      	subs	r3, #1
 8001670:	b29a      	uxth	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167a:	b29b      	uxth	r3, r3
 800167c:	3b01      	subs	r3, #1
 800167e:	b29a      	uxth	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001684:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	691a      	ldr	r2, [r3, #16]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	3b01      	subs	r3, #1
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80016b8:	e0ba      	b.n	8001830 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c0:	2200      	movs	r2, #0
 80016c2:	4967      	ldr	r1, [pc, #412]	; (8001860 <HAL_I2C_Master_Receive+0x458>)
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f000 fb1b 	bl	8001d00 <I2C_WaitOnFlagUntilTimeout>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0c1      	b.n	8001858 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80016e4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001702:	3b01      	subs	r3, #1
 8001704:	b29a      	uxth	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800170e:	b29b      	uxth	r3, r3
 8001710:	3b01      	subs	r3, #1
 8001712:	b29a      	uxth	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800171e:	2200      	movs	r2, #0
 8001720:	494f      	ldr	r1, [pc, #316]	; (8001860 <HAL_I2C_Master_Receive+0x458>)
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f000 faec 	bl	8001d00 <I2C_WaitOnFlagUntilTimeout>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e092      	b.n	8001858 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001740:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	691a      	ldr	r2, [r3, #16]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	1c5a      	adds	r2, r3, #1
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175e:	3b01      	subs	r3, #1
 8001760:	b29a      	uxth	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176a:	b29b      	uxth	r3, r3
 800176c:	3b01      	subs	r3, #1
 800176e:	b29a      	uxth	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001774:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	691a      	ldr	r2, [r3, #16]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179e:	b29b      	uxth	r3, r3
 80017a0:	3b01      	subs	r3, #1
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80017a8:	e042      	b.n	8001830 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 fbfe 	bl	8001fb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e04c      	b.n	8001858 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	691a      	ldr	r2, [r3, #16]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017da:	3b01      	subs	r3, #1
 80017dc:	b29a      	uxth	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	3b01      	subs	r3, #1
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d118      	bne.n	8001830 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001810:	1c5a      	adds	r2, r3, #1
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800181a:	3b01      	subs	r3, #1
 800181c:	b29a      	uxth	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001826:	b29b      	uxth	r3, r3
 8001828:	3b01      	subs	r3, #1
 800182a:	b29a      	uxth	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001834:	2b00      	cmp	r3, #0
 8001836:	f47f aebe 	bne.w	80015b6 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2220      	movs	r2, #32
 800183e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8001856:	2302      	movs	r3, #2
  }
}
 8001858:	4618      	mov	r0, r3
 800185a:	3728      	adds	r7, #40	; 0x28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	00010004 	.word	0x00010004

08001864 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af02      	add	r7, sp, #8
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	460b      	mov	r3, r1
 8001872:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001874:	f7ff f942 	bl	8000afc <HAL_GetTick>
 8001878:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800187a:	2301      	movs	r3, #1
 800187c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b20      	cmp	r3, #32
 8001888:	f040 8105 	bne.w	8001a96 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	2319      	movs	r3, #25
 8001892:	2201      	movs	r2, #1
 8001894:	4982      	ldr	r1, [pc, #520]	; (8001aa0 <HAL_I2C_IsDeviceReady+0x23c>)
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f000 fa32 	bl	8001d00 <I2C_WaitOnFlagUntilTimeout>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80018a2:	2302      	movs	r3, #2
 80018a4:	e0f8      	b.n	8001a98 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <HAL_I2C_IsDeviceReady+0x50>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e0f1      	b.n	8001a98 <HAL_I2C_IsDeviceReady+0x234>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d007      	beq.n	80018da <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f042 0201 	orr.w	r2, r2, #1
 80018d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2224      	movs	r2, #36	; 0x24
 80018ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4a6a      	ldr	r2, [pc, #424]	; (8001aa4 <HAL_I2C_IsDeviceReady+0x240>)
 80018fc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800190c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	2200      	movs	r2, #0
 8001916:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f000 f9f0 	bl	8001d00 <I2C_WaitOnFlagUntilTimeout>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e0b6      	b.n	8001a98 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800192a:	897b      	ldrh	r3, [r7, #10]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	461a      	mov	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001938:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800193a:	f7ff f8df 	bl	8000afc <HAL_GetTick>
 800193e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b02      	cmp	r3, #2
 800194c:	bf0c      	ite	eq
 800194e:	2301      	moveq	r3, #1
 8001950:	2300      	movne	r3, #0
 8001952:	b2db      	uxtb	r3, r3
 8001954:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001964:	bf0c      	ite	eq
 8001966:	2301      	moveq	r3, #1
 8001968:	2300      	movne	r3, #0
 800196a:	b2db      	uxtb	r3, r3
 800196c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800196e:	e025      	b.n	80019bc <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001970:	f7ff f8c4 	bl	8000afc <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d302      	bcc.n	8001986 <HAL_I2C_IsDeviceReady+0x122>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d103      	bne.n	800198e <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	22a0      	movs	r2, #160	; 0xa0
 800198a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b02      	cmp	r3, #2
 800199a:	bf0c      	ite	eq
 800199c:	2301      	moveq	r3, #1
 800199e:	2300      	movne	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b2:	bf0c      	ite	eq
 80019b4:	2301      	moveq	r3, #1
 80019b6:	2300      	movne	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2ba0      	cmp	r3, #160	; 0xa0
 80019c6:	d005      	beq.n	80019d4 <HAL_I2C_IsDeviceReady+0x170>
 80019c8:	7dfb      	ldrb	r3, [r7, #23]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d102      	bne.n	80019d4 <HAL_I2C_IsDeviceReady+0x170>
 80019ce:	7dbb      	ldrb	r3, [r7, #22]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0cd      	beq.n	8001970 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2220      	movs	r2, #32
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d129      	bne.n	8001a3e <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019f8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	2319      	movs	r3, #25
 8001a16:	2201      	movs	r2, #1
 8001a18:	4921      	ldr	r1, [pc, #132]	; (8001aa0 <HAL_I2C_IsDeviceReady+0x23c>)
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f000 f970 	bl	8001d00 <I2C_WaitOnFlagUntilTimeout>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e036      	b.n	8001a98 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e02c      	b.n	8001a98 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a56:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	2319      	movs	r3, #25
 8001a5e:	2201      	movs	r2, #1
 8001a60:	490f      	ldr	r1, [pc, #60]	; (8001aa0 <HAL_I2C_IsDeviceReady+0x23c>)
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 f94c 	bl	8001d00 <I2C_WaitOnFlagUntilTimeout>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e012      	b.n	8001a98 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	3301      	adds	r3, #1
 8001a76:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	f4ff af3e 	bcc.w	80018fe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2220      	movs	r2, #32
 8001a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8001a96:	2302      	movs	r3, #2
  }
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3720      	adds	r7, #32
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	00100002 	.word	0x00100002
 8001aa4:	ffff0000 	.word	0xffff0000

08001aa8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d006      	beq.n	8001ad2 <I2C_MasterRequestWrite+0x2a>
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d003      	beq.n	8001ad2 <I2C_MasterRequestWrite+0x2a>
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ad0:	d108      	bne.n	8001ae4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	e00b      	b.n	8001afc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	2b12      	cmp	r3, #18
 8001aea:	d107      	bne.n	8001afc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001afa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f000 f8f9 	bl	8001d00 <I2C_WaitOnFlagUntilTimeout>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e035      	b.n	8001b84 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b20:	d108      	bne.n	8001b34 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b22:	897b      	ldrh	r3, [r7, #10]
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	461a      	mov	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b30:	611a      	str	r2, [r3, #16]
 8001b32:	e01b      	b.n	8001b6c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b34:	897b      	ldrh	r3, [r7, #10]
 8001b36:	11db      	asrs	r3, r3, #7
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	f003 0306 	and.w	r3, r3, #6
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	f063 030f 	orn	r3, r3, #15
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	490e      	ldr	r1, [pc, #56]	; (8001b8c <I2C_MasterRequestWrite+0xe4>)
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 f92b 	bl	8001dae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e010      	b.n	8001b84 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b62:	897b      	ldrh	r3, [r7, #10]
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	4907      	ldr	r1, [pc, #28]	; (8001b90 <I2C_MasterRequestWrite+0xe8>)
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 f91b 	bl	8001dae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	00010008 	.word	0x00010008
 8001b90:	00010002 	.word	0x00010002

08001b94 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af02      	add	r7, sp, #8
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bb8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d006      	beq.n	8001bce <I2C_MasterRequestRead+0x3a>
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d003      	beq.n	8001bce <I2C_MasterRequestRead+0x3a>
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001bcc:	d108      	bne.n	8001be0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	e00b      	b.n	8001bf8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	2b11      	cmp	r3, #17
 8001be6:	d107      	bne.n	8001bf8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bf6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f000 f87b 	bl	8001d00 <I2C_WaitOnFlagUntilTimeout>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e06d      	b.n	8001cf0 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c1c:	d108      	bne.n	8001c30 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001c1e:	897b      	ldrh	r3, [r7, #10]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	611a      	str	r2, [r3, #16]
 8001c2e:	e053      	b.n	8001cd8 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c30:	897b      	ldrh	r3, [r7, #10]
 8001c32:	11db      	asrs	r3, r3, #7
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	f003 0306 	and.w	r3, r3, #6
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f063 030f 	orn	r3, r3, #15
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	492a      	ldr	r1, [pc, #168]	; (8001cf8 <I2C_MasterRequestRead+0x164>)
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f000 f8ad 	bl	8001dae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e048      	b.n	8001cf0 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c5e:	897b      	ldrh	r3, [r7, #10]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	4923      	ldr	r1, [pc, #140]	; (8001cfc <I2C_MasterRequestRead+0x168>)
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 f89d 	bl	8001dae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e038      	b.n	8001cf0 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ca2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 f825 	bl	8001d00 <I2C_WaitOnFlagUntilTimeout>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e017      	b.n	8001cf0 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001cc0:	897b      	ldrh	r3, [r7, #10]
 8001cc2:	11db      	asrs	r3, r3, #7
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	f003 0306 	and.w	r3, r3, #6
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	f063 030e 	orn	r3, r3, #14
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	4907      	ldr	r1, [pc, #28]	; (8001cfc <I2C_MasterRequestRead+0x168>)
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 f865 	bl	8001dae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	00010008 	.word	0x00010008
 8001cfc:	00010002 	.word	0x00010002

08001d00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d10:	e025      	b.n	8001d5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d18:	d021      	beq.n	8001d5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d1a:	f7fe feef 	bl	8000afc <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d302      	bcc.n	8001d30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d116      	bne.n	8001d5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f043 0220 	orr.w	r2, r3, #32
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e023      	b.n	8001da6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	0c1b      	lsrs	r3, r3, #16
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d10d      	bne.n	8001d84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	4013      	ands	r3, r2
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	bf0c      	ite	eq
 8001d7a:	2301      	moveq	r3, #1
 8001d7c:	2300      	movne	r3, #0
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	e00c      	b.n	8001d9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	bf0c      	ite	eq
 8001d96:	2301      	moveq	r3, #1
 8001d98:	2300      	movne	r3, #0
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d0b6      	beq.n	8001d12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b084      	sub	sp, #16
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001dbc:	e051      	b.n	8001e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dcc:	d123      	bne.n	8001e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ddc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001de6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2220      	movs	r2, #32
 8001df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f043 0204 	orr.w	r2, r3, #4
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e046      	b.n	8001ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1c:	d021      	beq.n	8001e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e1e:	f7fe fe6d 	bl	8000afc <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d302      	bcc.n	8001e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d116      	bne.n	8001e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f043 0220 	orr.w	r2, r3, #32
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e020      	b.n	8001ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	0c1b      	lsrs	r3, r3, #16
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d10c      	bne.n	8001e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	43da      	mvns	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	4013      	ands	r3, r2
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	bf14      	ite	ne
 8001e7e:	2301      	movne	r3, #1
 8001e80:	2300      	moveq	r3, #0
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	e00b      	b.n	8001e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	43da      	mvns	r2, r3
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	4013      	ands	r3, r2
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	bf14      	ite	ne
 8001e98:	2301      	movne	r3, #1
 8001e9a:	2300      	moveq	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d18d      	bne.n	8001dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001eb8:	e02d      	b.n	8001f16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 f8ce 	bl	800205c <I2C_IsAcknowledgeFailed>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e02d      	b.n	8001f26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed0:	d021      	beq.n	8001f16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ed2:	f7fe fe13 	bl	8000afc <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d302      	bcc.n	8001ee8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d116      	bne.n	8001f16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f043 0220 	orr.w	r2, r3, #32
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e007      	b.n	8001f26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f20:	2b80      	cmp	r3, #128	; 0x80
 8001f22:	d1ca      	bne.n	8001eba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b084      	sub	sp, #16
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f3a:	e02d      	b.n	8001f98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 f88d 	bl	800205c <I2C_IsAcknowledgeFailed>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e02d      	b.n	8001fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f52:	d021      	beq.n	8001f98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f54:	f7fe fdd2 	bl	8000afc <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d302      	bcc.n	8001f6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d116      	bne.n	8001f98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	f043 0220 	orr.w	r2, r3, #32
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e007      	b.n	8001fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d1ca      	bne.n	8001f3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fbc:	e042      	b.n	8002044 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	f003 0310 	and.w	r3, r3, #16
 8001fc8:	2b10      	cmp	r3, #16
 8001fca:	d119      	bne.n	8002000 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0210 	mvn.w	r2, #16
 8001fd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e029      	b.n	8002054 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002000:	f7fe fd7c 	bl	8000afc <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	429a      	cmp	r2, r3
 800200e:	d302      	bcc.n	8002016 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d116      	bne.n	8002044 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2220      	movs	r2, #32
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	f043 0220 	orr.w	r2, r3, #32
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e007      	b.n	8002054 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204e:	2b40      	cmp	r3, #64	; 0x40
 8002050:	d1b5      	bne.n	8001fbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002072:	d11b      	bne.n	80020ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800207c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2220      	movs	r2, #32
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f043 0204 	orr.w	r2, r3, #4
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e26c      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 8087 	beq.w	80021e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d8:	4b92      	ldr	r3, [pc, #584]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 030c 	and.w	r3, r3, #12
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d00c      	beq.n	80020fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020e4:	4b8f      	ldr	r3, [pc, #572]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 030c 	and.w	r3, r3, #12
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d112      	bne.n	8002116 <HAL_RCC_OscConfig+0x5e>
 80020f0:	4b8c      	ldr	r3, [pc, #560]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020fc:	d10b      	bne.n	8002116 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fe:	4b89      	ldr	r3, [pc, #548]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d06c      	beq.n	80021e4 <HAL_RCC_OscConfig+0x12c>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d168      	bne.n	80021e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e246      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211e:	d106      	bne.n	800212e <HAL_RCC_OscConfig+0x76>
 8002120:	4b80      	ldr	r3, [pc, #512]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a7f      	ldr	r2, [pc, #508]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	e02e      	b.n	800218c <HAL_RCC_OscConfig+0xd4>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0x98>
 8002136:	4b7b      	ldr	r3, [pc, #492]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a7a      	ldr	r2, [pc, #488]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800213c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b78      	ldr	r3, [pc, #480]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a77      	ldr	r2, [pc, #476]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002148:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e01d      	b.n	800218c <HAL_RCC_OscConfig+0xd4>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0xbc>
 800215a:	4b72      	ldr	r3, [pc, #456]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a71      	ldr	r2, [pc, #452]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b6f      	ldr	r3, [pc, #444]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a6e      	ldr	r2, [pc, #440]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e00b      	b.n	800218c <HAL_RCC_OscConfig+0xd4>
 8002174:	4b6b      	ldr	r3, [pc, #428]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a6a      	ldr	r2, [pc, #424]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800217a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	4b68      	ldr	r3, [pc, #416]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a67      	ldr	r2, [pc, #412]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d013      	beq.n	80021bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7fe fcb2 	bl	8000afc <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800219c:	f7fe fcae 	bl	8000afc <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	; 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e1fa      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	4b5d      	ldr	r3, [pc, #372]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0xe4>
 80021ba:	e014      	b.n	80021e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7fe fc9e 	bl	8000afc <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c4:	f7fe fc9a 	bl	8000afc <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	; 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e1e6      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d6:	4b53      	ldr	r3, [pc, #332]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x10c>
 80021e2:	e000      	b.n	80021e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d063      	beq.n	80022ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021f2:	4b4c      	ldr	r3, [pc, #304]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00b      	beq.n	8002216 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021fe:	4b49      	ldr	r3, [pc, #292]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b08      	cmp	r3, #8
 8002208:	d11c      	bne.n	8002244 <HAL_RCC_OscConfig+0x18c>
 800220a:	4b46      	ldr	r3, [pc, #280]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d116      	bne.n	8002244 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002216:	4b43      	ldr	r3, [pc, #268]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <HAL_RCC_OscConfig+0x176>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d001      	beq.n	800222e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e1ba      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222e:	4b3d      	ldr	r3, [pc, #244]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4939      	ldr	r1, [pc, #228]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002242:	e03a      	b.n	80022ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d020      	beq.n	800228e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800224c:	4b36      	ldr	r3, [pc, #216]	; (8002328 <HAL_RCC_OscConfig+0x270>)
 800224e:	2201      	movs	r2, #1
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002252:	f7fe fc53 	bl	8000afc <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800225a:	f7fe fc4f 	bl	8000afc <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e19b      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226c:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002278:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4927      	ldr	r1, [pc, #156]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]
 800228c:	e015      	b.n	80022ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800228e:	4b26      	ldr	r3, [pc, #152]	; (8002328 <HAL_RCC_OscConfig+0x270>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7fe fc32 	bl	8000afc <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800229c:	f7fe fc2e 	bl	8000afc <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e17a      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ae:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d03a      	beq.n	800233c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d019      	beq.n	8002302 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ce:	4b17      	ldr	r3, [pc, #92]	; (800232c <HAL_RCC_OscConfig+0x274>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d4:	f7fe fc12 	bl	8000afc <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022dc:	f7fe fc0e 	bl	8000afc <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e15a      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022fa:	2001      	movs	r0, #1
 80022fc:	f000 fac6 	bl	800288c <RCC_Delay>
 8002300:	e01c      	b.n	800233c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <HAL_RCC_OscConfig+0x274>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002308:	f7fe fbf8 	bl	8000afc <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800230e:	e00f      	b.n	8002330 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002310:	f7fe fbf4 	bl	8000afc <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d908      	bls.n	8002330 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e140      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000
 8002328:	42420000 	.word	0x42420000
 800232c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002330:	4b9e      	ldr	r3, [pc, #632]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1e9      	bne.n	8002310 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80a6 	beq.w	8002496 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800234a:	2300      	movs	r3, #0
 800234c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800234e:	4b97      	ldr	r3, [pc, #604]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10d      	bne.n	8002376 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235a:	4b94      	ldr	r3, [pc, #592]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	4a93      	ldr	r2, [pc, #588]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002364:	61d3      	str	r3, [r2, #28]
 8002366:	4b91      	ldr	r3, [pc, #580]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002372:	2301      	movs	r3, #1
 8002374:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002376:	4b8e      	ldr	r3, [pc, #568]	; (80025b0 <HAL_RCC_OscConfig+0x4f8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d118      	bne.n	80023b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002382:	4b8b      	ldr	r3, [pc, #556]	; (80025b0 <HAL_RCC_OscConfig+0x4f8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a8a      	ldr	r2, [pc, #552]	; (80025b0 <HAL_RCC_OscConfig+0x4f8>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238e:	f7fe fbb5 	bl	8000afc <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002396:	f7fe fbb1 	bl	8000afc <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b64      	cmp	r3, #100	; 0x64
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e0fd      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a8:	4b81      	ldr	r3, [pc, #516]	; (80025b0 <HAL_RCC_OscConfig+0x4f8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x312>
 80023bc:	4b7b      	ldr	r3, [pc, #492]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	4a7a      	ldr	r2, [pc, #488]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6213      	str	r3, [r2, #32]
 80023c8:	e02d      	b.n	8002426 <HAL_RCC_OscConfig+0x36e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0x334>
 80023d2:	4b76      	ldr	r3, [pc, #472]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4a75      	ldr	r2, [pc, #468]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6213      	str	r3, [r2, #32]
 80023de:	4b73      	ldr	r3, [pc, #460]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4a72      	ldr	r2, [pc, #456]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	f023 0304 	bic.w	r3, r3, #4
 80023e8:	6213      	str	r3, [r2, #32]
 80023ea:	e01c      	b.n	8002426 <HAL_RCC_OscConfig+0x36e>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d10c      	bne.n	800240e <HAL_RCC_OscConfig+0x356>
 80023f4:	4b6d      	ldr	r3, [pc, #436]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4a6c      	ldr	r2, [pc, #432]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80023fa:	f043 0304 	orr.w	r3, r3, #4
 80023fe:	6213      	str	r3, [r2, #32]
 8002400:	4b6a      	ldr	r3, [pc, #424]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4a69      	ldr	r2, [pc, #420]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6213      	str	r3, [r2, #32]
 800240c:	e00b      	b.n	8002426 <HAL_RCC_OscConfig+0x36e>
 800240e:	4b67      	ldr	r3, [pc, #412]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4a66      	ldr	r2, [pc, #408]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	6213      	str	r3, [r2, #32]
 800241a:	4b64      	ldr	r3, [pc, #400]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	4a63      	ldr	r2, [pc, #396]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002420:	f023 0304 	bic.w	r3, r3, #4
 8002424:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d015      	beq.n	800245a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242e:	f7fe fb65 	bl	8000afc <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002434:	e00a      	b.n	800244c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002436:	f7fe fb61 	bl	8000afc <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	; 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e0ab      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244c:	4b57      	ldr	r3, [pc, #348]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0ee      	beq.n	8002436 <HAL_RCC_OscConfig+0x37e>
 8002458:	e014      	b.n	8002484 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245a:	f7fe fb4f 	bl	8000afc <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002460:	e00a      	b.n	8002478 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7fe fb4b 	bl	8000afc <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e095      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002478:	4b4c      	ldr	r3, [pc, #304]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1ee      	bne.n	8002462 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002484:	7dfb      	ldrb	r3, [r7, #23]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d105      	bne.n	8002496 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248a:	4b48      	ldr	r3, [pc, #288]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	4a47      	ldr	r2, [pc, #284]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002494:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 8081 	beq.w	80025a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024a0:	4b42      	ldr	r3, [pc, #264]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d061      	beq.n	8002570 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d146      	bne.n	8002542 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b4:	4b3f      	ldr	r3, [pc, #252]	; (80025b4 <HAL_RCC_OscConfig+0x4fc>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7fe fb1f 	bl	8000afc <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c2:	f7fe fb1b 	bl	8000afc <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e067      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d4:	4b35      	ldr	r3, [pc, #212]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f0      	bne.n	80024c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e8:	d108      	bne.n	80024fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024ea:	4b30      	ldr	r3, [pc, #192]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	492d      	ldr	r1, [pc, #180]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024fc:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a19      	ldr	r1, [r3, #32]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	430b      	orrs	r3, r1
 800250e:	4927      	ldr	r1, [pc, #156]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <HAL_RCC_OscConfig+0x4fc>)
 8002516:	2201      	movs	r2, #1
 8002518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251a:	f7fe faef 	bl	8000afc <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002522:	f7fe faeb 	bl	8000afc <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e037      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x46a>
 8002540:	e02f      	b.n	80025a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002542:	4b1c      	ldr	r3, [pc, #112]	; (80025b4 <HAL_RCC_OscConfig+0x4fc>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7fe fad8 	bl	8000afc <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002550:	f7fe fad4 	bl	8000afc <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e020      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x498>
 800256e:	e018      	b.n	80025a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e013      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_RCC_OscConfig+0x4f4>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	429a      	cmp	r2, r3
 800258e:	d106      	bne.n	800259e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d001      	beq.n	80025a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40007000 	.word	0x40007000
 80025b4:	42420060 	.word	0x42420060

080025b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0d0      	b.n	800276e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025cc:	4b6a      	ldr	r3, [pc, #424]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d910      	bls.n	80025fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b67      	ldr	r3, [pc, #412]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 0207 	bic.w	r2, r3, #7
 80025e2:	4965      	ldr	r1, [pc, #404]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ea:	4b63      	ldr	r3, [pc, #396]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0b8      	b.n	800276e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d020      	beq.n	800264a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002614:	4b59      	ldr	r3, [pc, #356]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	4a58      	ldr	r2, [pc, #352]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800261e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800262c:	4b53      	ldr	r3, [pc, #332]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4a52      	ldr	r2, [pc, #328]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002636:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002638:	4b50      	ldr	r3, [pc, #320]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	494d      	ldr	r1, [pc, #308]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	4313      	orrs	r3, r2
 8002648:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d040      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d107      	bne.n	800266e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265e:	4b47      	ldr	r3, [pc, #284]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d115      	bne.n	8002696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e07f      	b.n	800276e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d107      	bne.n	8002686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002676:	4b41      	ldr	r3, [pc, #260]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e073      	b.n	800276e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002686:	4b3d      	ldr	r3, [pc, #244]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e06b      	b.n	800276e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002696:	4b39      	ldr	r3, [pc, #228]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f023 0203 	bic.w	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	4936      	ldr	r1, [pc, #216]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a8:	f7fe fa28 	bl	8000afc <HAL_GetTick>
 80026ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ae:	e00a      	b.n	80026c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b0:	f7fe fa24 	bl	8000afc <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e053      	b.n	800276e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c6:	4b2d      	ldr	r3, [pc, #180]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 020c 	and.w	r2, r3, #12
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d1eb      	bne.n	80026b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d8:	4b27      	ldr	r3, [pc, #156]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d210      	bcs.n	8002708 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e6:	4b24      	ldr	r3, [pc, #144]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 0207 	bic.w	r2, r3, #7
 80026ee:	4922      	ldr	r1, [pc, #136]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f6:	4b20      	ldr	r3, [pc, #128]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e032      	b.n	800276e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002714:	4b19      	ldr	r3, [pc, #100]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4916      	ldr	r1, [pc, #88]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	4313      	orrs	r3, r2
 8002724:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	d009      	beq.n	8002746 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002732:	4b12      	ldr	r3, [pc, #72]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	490e      	ldr	r1, [pc, #56]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	4313      	orrs	r3, r2
 8002744:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002746:	f000 f821 	bl	800278c <HAL_RCC_GetSysClockFreq>
 800274a:	4601      	mov	r1, r0
 800274c:	4b0b      	ldr	r3, [pc, #44]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	4a0a      	ldr	r2, [pc, #40]	; (8002780 <HAL_RCC_ClockConfig+0x1c8>)
 8002758:	5cd3      	ldrb	r3, [r2, r3]
 800275a:	fa21 f303 	lsr.w	r3, r1, r3
 800275e:	4a09      	ldr	r2, [pc, #36]	; (8002784 <HAL_RCC_ClockConfig+0x1cc>)
 8002760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <HAL_RCC_ClockConfig+0x1d0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe f986 	bl	8000a78 <HAL_InitTick>

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40022000 	.word	0x40022000
 800277c:	40021000 	.word	0x40021000
 8002780:	08003250 	.word	0x08003250
 8002784:	20000000 	.word	0x20000000
 8002788:	20000004 	.word	0x20000004

0800278c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800278c:	b490      	push	{r4, r7}
 800278e:	b08a      	sub	sp, #40	; 0x28
 8002790:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002792:	4b2a      	ldr	r3, [pc, #168]	; (800283c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002794:	1d3c      	adds	r4, r7, #4
 8002796:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002798:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800279c:	4b28      	ldr	r3, [pc, #160]	; (8002840 <HAL_RCC_GetSysClockFreq+0xb4>)
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	2300      	movs	r3, #0
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027b6:	4b23      	ldr	r3, [pc, #140]	; (8002844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d002      	beq.n	80027cc <HAL_RCC_GetSysClockFreq+0x40>
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d003      	beq.n	80027d2 <HAL_RCC_GetSysClockFreq+0x46>
 80027ca:	e02d      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027cc:	4b1e      	ldr	r3, [pc, #120]	; (8002848 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027ce:	623b      	str	r3, [r7, #32]
      break;
 80027d0:	e02d      	b.n	800282e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	0c9b      	lsrs	r3, r3, #18
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027de:	4413      	add	r3, r2
 80027e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d013      	beq.n	8002818 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027f0:	4b14      	ldr	r3, [pc, #80]	; (8002844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	0c5b      	lsrs	r3, r3, #17
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027fe:	4413      	add	r3, r2
 8002800:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002804:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	4a0f      	ldr	r2, [pc, #60]	; (8002848 <HAL_RCC_GetSysClockFreq+0xbc>)
 800280a:	fb02 f203 	mul.w	r2, r2, r3
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	fbb2 f3f3 	udiv	r3, r2, r3
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
 8002816:	e004      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	4a0c      	ldr	r2, [pc, #48]	; (800284c <HAL_RCC_GetSysClockFreq+0xc0>)
 800281c:	fb02 f303 	mul.w	r3, r2, r3
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	623b      	str	r3, [r7, #32]
      break;
 8002826:	e002      	b.n	800282e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002828:	4b07      	ldr	r3, [pc, #28]	; (8002848 <HAL_RCC_GetSysClockFreq+0xbc>)
 800282a:	623b      	str	r3, [r7, #32]
      break;
 800282c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800282e:	6a3b      	ldr	r3, [r7, #32]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3728      	adds	r7, #40	; 0x28
 8002834:	46bd      	mov	sp, r7
 8002836:	bc90      	pop	{r4, r7}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	08003180 	.word	0x08003180
 8002840:	08003190 	.word	0x08003190
 8002844:	40021000 	.word	0x40021000
 8002848:	007a1200 	.word	0x007a1200
 800284c:	003d0900 	.word	0x003d0900

08002850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002854:	4b02      	ldr	r3, [pc, #8]	; (8002860 <HAL_RCC_GetHCLKFreq+0x10>)
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	20000000 	.word	0x20000000

08002864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002868:	f7ff fff2 	bl	8002850 <HAL_RCC_GetHCLKFreq>
 800286c:	4601      	mov	r1, r0
 800286e:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	0a1b      	lsrs	r3, r3, #8
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	4a03      	ldr	r2, [pc, #12]	; (8002888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800287a:	5cd3      	ldrb	r3, [r2, r3]
 800287c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40021000 	.word	0x40021000
 8002888:	08003260 	.word	0x08003260

0800288c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002894:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <RCC_Delay+0x34>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <RCC_Delay+0x38>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	0a5b      	lsrs	r3, r3, #9
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	fb02 f303 	mul.w	r3, r2, r3
 80028a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028a8:	bf00      	nop
  }
  while (Delay --);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1e5a      	subs	r2, r3, #1
 80028ae:	60fa      	str	r2, [r7, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f9      	bne.n	80028a8 <RCC_Delay+0x1c>
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000000 	.word	0x20000000
 80028c4:	10624dd3 	.word	0x10624dd3

080028c8 <MPU6050WakeUpSensor>:

#include "mpu6050.h"

//**************** MPU6050 CODES ****************//

bool MPU6050WakeUpSensor(I2C_HandleTypeDef *I2Cx) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	6078      	str	r0, [r7, #4]

	if (MPU6050CheckProperties() == false)
 80028d0:	f000 fb38 	bl	8002f44 <MPU6050CheckProperties>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f083 0301 	eor.w	r3, r3, #1
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MPU6050WakeUpSensor+0x1c>
		return false;
 80028e0:	2300      	movs	r3, #0
 80028e2:	e02a      	b.n	800293a <MPU6050WakeUpSensor+0x72>

	HAL_StatusTypeDef halI2CResult;
	uint8_t i2c_buffer[8];
	i2c_buffer[0] = MPU6050_REGISTER_ADDR_POWER_MANAGEMENT_2;
 80028e4:	236b      	movs	r3, #107	; 0x6b
 80028e6:	733b      	strb	r3, [r7, #12]
	i2c_buffer[1] = 0x00;
 80028e8:	2300      	movs	r3, #0
 80028ea:	737b      	strb	r3, [r7, #13]

	halI2CResult = HAL_I2C_Master_Transmit(I2Cx, MPU6050Properties.I2CAddress,
 80028ec:	4b15      	ldr	r3, [pc, #84]	; (8002944 <MPU6050WakeUpSensor+0x7c>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	b299      	uxth	r1, r3
 80028f2:	f107 020c 	add.w	r2, r7, #12
 80028f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	2302      	movs	r3, #2
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fe fc84 	bl	800120c <HAL_I2C_Master_Transmit>
 8002904:	4603      	mov	r3, r0
 8002906:	75fb      	strb	r3, [r7, #23]
			i2c_buffer, 2, MPU6050_DEFAULT_TIMEOUT_VALUE);
	if (halI2CResult == HAL_TIMEOUT) {
 8002908:	7dfb      	ldrb	r3, [r7, #23]
 800290a:	2b03      	cmp	r3, #3
 800290c:	d104      	bne.n	8002918 <MPU6050WakeUpSensor+0x50>
		MPU6050ErrorOccured(TimeoutI2CInterface);
 800290e:	2004      	movs	r0, #4
 8002910:	f000 fbe6 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002914:	2300      	movs	r3, #0
 8002916:	e010      	b.n	800293a <MPU6050WakeUpSensor+0x72>
	} else if (halI2CResult == HAL_ERROR) {
 8002918:	7dfb      	ldrb	r3, [r7, #23]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d104      	bne.n	8002928 <MPU6050WakeUpSensor+0x60>
		MPU6050ErrorOccured(ErrorI2CInterface);
 800291e:	2005      	movs	r0, #5
 8002920:	f000 fbde 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002924:	2300      	movs	r3, #0
 8002926:	e008      	b.n	800293a <MPU6050WakeUpSensor+0x72>
	} else if (halI2CResult == HAL_BUSY) {
 8002928:	7dfb      	ldrb	r3, [r7, #23]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d104      	bne.n	8002938 <MPU6050WakeUpSensor+0x70>
		MPU6050ErrorOccured(BusyI2CInterface);
 800292e:	2003      	movs	r0, #3
 8002930:	f000 fbd6 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002934:	2300      	movs	r3, #0
 8002936:	e000      	b.n	800293a <MPU6050WakeUpSensor+0x72>
	}

	return true;
 8002938:	2301      	movs	r3, #1
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000094 	.word	0x20000094

08002948 <MPU6050SetAccelerometerRange>:

bool MPU6050SetAccelerometerRange(I2C_HandleTypeDef *I2Cx,
		MPU6050_AccRange accRange) {
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af02      	add	r7, sp, #8
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	70fb      	strb	r3, [r7, #3]

	if (MPU6050CheckProperties() == false)
 8002954:	f000 faf6 	bl	8002f44 <MPU6050CheckProperties>
 8002958:	4603      	mov	r3, r0
 800295a:	f083 0301 	eor.w	r3, r3, #1
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MPU6050SetAccelerometerRange+0x20>
		return false;
 8002964:	2300      	movs	r3, #0
 8002966:	e02f      	b.n	80029c8 <MPU6050SetAccelerometerRange+0x80>

	HAL_StatusTypeDef halI2CResult;
	uint8_t i2c_buffer[8];

	// Set Accelerometer Range
	i2c_buffer[0] = MPU6050_REGISTER_ADDR_ACCEL_RANGE_CONFIG;
 8002968:	231c      	movs	r3, #28
 800296a:	733b      	strb	r3, [r7, #12]
	i2c_buffer[1] = accRange << 3;
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	737b      	strb	r3, [r7, #13]
	halI2CResult = HAL_I2C_Master_Transmit(I2Cx, MPU6050Properties.I2CAddress,
 8002974:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <MPU6050SetAccelerometerRange+0x88>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	b299      	uxth	r1, r3
 800297a:	f107 020c 	add.w	r2, r7, #12
 800297e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	2302      	movs	r3, #2
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fe fc40 	bl	800120c <HAL_I2C_Master_Transmit>
 800298c:	4603      	mov	r3, r0
 800298e:	75fb      	strb	r3, [r7, #23]
			i2c_buffer, 2, MPU6050_DEFAULT_TIMEOUT_VALUE);
	if (halI2CResult == HAL_TIMEOUT) {
 8002990:	7dfb      	ldrb	r3, [r7, #23]
 8002992:	2b03      	cmp	r3, #3
 8002994:	d104      	bne.n	80029a0 <MPU6050SetAccelerometerRange+0x58>
		MPU6050ErrorOccured(TimeoutI2CInterface);
 8002996:	2004      	movs	r0, #4
 8002998:	f000 fba2 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 800299c:	2300      	movs	r3, #0
 800299e:	e013      	b.n	80029c8 <MPU6050SetAccelerometerRange+0x80>
	} else if (halI2CResult == HAL_ERROR) {
 80029a0:	7dfb      	ldrb	r3, [r7, #23]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d104      	bne.n	80029b0 <MPU6050SetAccelerometerRange+0x68>
		MPU6050ErrorOccured(ErrorI2CInterface);
 80029a6:	2005      	movs	r0, #5
 80029a8:	f000 fb9a 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e00b      	b.n	80029c8 <MPU6050SetAccelerometerRange+0x80>
	} else if (halI2CResult == HAL_BUSY) {
 80029b0:	7dfb      	ldrb	r3, [r7, #23]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d104      	bne.n	80029c0 <MPU6050SetAccelerometerRange+0x78>
		MPU6050ErrorOccured(BusyI2CInterface);
 80029b6:	2003      	movs	r0, #3
 80029b8:	f000 fb92 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 80029bc:	2300      	movs	r3, #0
 80029be:	e003      	b.n	80029c8 <MPU6050SetAccelerometerRange+0x80>
	}

	// Assign Variables
	MPU6050Properties.accRange = accRange;
 80029c0:	4a03      	ldr	r2, [pc, #12]	; (80029d0 <MPU6050SetAccelerometerRange+0x88>)
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	7053      	strb	r3, [r2, #1]

	return true;
 80029c6:	2301      	movs	r3, #1
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000094 	.word	0x20000094

080029d4 <MPU6050SetGyroRange>:

bool MPU6050SetGyroRange(I2C_HandleTypeDef *I2Cx, MPU6050_GyroRange gyRange) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af02      	add	r7, sp, #8
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	70fb      	strb	r3, [r7, #3]

	if (MPU6050CheckProperties() == false)
 80029e0:	f000 fab0 	bl	8002f44 <MPU6050CheckProperties>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f083 0301 	eor.w	r3, r3, #1
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MPU6050SetGyroRange+0x20>
		return false;
 80029f0:	2300      	movs	r3, #0
 80029f2:	e02f      	b.n	8002a54 <MPU6050SetGyroRange+0x80>

	HAL_StatusTypeDef halI2CResult;
	uint8_t i2c_buffer[8];

	// Set Gyroscope Range
	i2c_buffer[0] = MPU6050_REGISTER_ADDR_GYRO_RANGE_CONFIG;
 80029f4:	231b      	movs	r3, #27
 80029f6:	733b      	strb	r3, [r7, #12]
	i2c_buffer[1] = gyRange << 3;
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	737b      	strb	r3, [r7, #13]

	halI2CResult = HAL_I2C_Master_Transmit(I2Cx, MPU6050Properties.I2CAddress,
 8002a00:	4b16      	ldr	r3, [pc, #88]	; (8002a5c <MPU6050SetGyroRange+0x88>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	b299      	uxth	r1, r3
 8002a06:	f107 020c 	add.w	r2, r7, #12
 8002a0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	2302      	movs	r3, #2
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7fe fbfa 	bl	800120c <HAL_I2C_Master_Transmit>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	75fb      	strb	r3, [r7, #23]
			i2c_buffer, 2, MPU6050_DEFAULT_TIMEOUT_VALUE);
	if (halI2CResult == HAL_TIMEOUT) {
 8002a1c:	7dfb      	ldrb	r3, [r7, #23]
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d104      	bne.n	8002a2c <MPU6050SetGyroRange+0x58>
		MPU6050ErrorOccured(TimeoutI2CInterface);
 8002a22:	2004      	movs	r0, #4
 8002a24:	f000 fb5c 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	e013      	b.n	8002a54 <MPU6050SetGyroRange+0x80>
	} else if (halI2CResult == HAL_ERROR) {
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d104      	bne.n	8002a3c <MPU6050SetGyroRange+0x68>
		MPU6050ErrorOccured(ErrorI2CInterface);
 8002a32:	2005      	movs	r0, #5
 8002a34:	f000 fb54 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e00b      	b.n	8002a54 <MPU6050SetGyroRange+0x80>
	} else if (halI2CResult == HAL_BUSY) {
 8002a3c:	7dfb      	ldrb	r3, [r7, #23]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d104      	bne.n	8002a4c <MPU6050SetGyroRange+0x78>
		MPU6050ErrorOccured(BusyI2CInterface);
 8002a42:	2003      	movs	r0, #3
 8002a44:	f000 fb4c 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	e003      	b.n	8002a54 <MPU6050SetGyroRange+0x80>
	}

	// Assign Variables
	MPU6050Properties.gyroRange = gyRange;
 8002a4c:	4a03      	ldr	r2, [pc, #12]	; (8002a5c <MPU6050SetGyroRange+0x88>)
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	7093      	strb	r3, [r2, #2]

	return true;
 8002a52:	2301      	movs	r3, #1
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000094 	.word	0x20000094

08002a60 <MPU6050SetSamplingRate>:

bool MPU6050SetSamplingRate(I2C_HandleTypeDef *I2Cx, MPU6050_SamplingRate sr) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af02      	add	r7, sp, #8
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	70fb      	strb	r3, [r7, #3]

	if (MPU6050CheckProperties() == false)
 8002a6c:	f000 fa6a 	bl	8002f44 <MPU6050CheckProperties>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f083 0301 	eor.w	r3, r3, #1
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MPU6050SetSamplingRate+0x20>
		return false;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	e02d      	b.n	8002adc <MPU6050SetSamplingRate+0x7c>

	uint8_t i2c_buffer[8];
	i2c_buffer[0] = MPU6050_REGISTER_ADDR_SAMPLING_RATE;
 8002a80:	2319      	movs	r3, #25
 8002a82:	733b      	strb	r3, [r7, #12]
	i2c_buffer[1] = sr;
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	737b      	strb	r3, [r7, #13]

	HAL_StatusTypeDef halI2CResult = HAL_I2C_Master_Transmit(I2Cx,
			MPU6050Properties.I2CAddress, i2c_buffer, 2,
 8002a88:	4b16      	ldr	r3, [pc, #88]	; (8002ae4 <MPU6050SetSamplingRate+0x84>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
	HAL_StatusTypeDef halI2CResult = HAL_I2C_Master_Transmit(I2Cx,
 8002a8c:	b299      	uxth	r1, r3
 8002a8e:	f107 020c 	add.w	r2, r7, #12
 8002a92:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	2302      	movs	r3, #2
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7fe fbb6 	bl	800120c <HAL_I2C_Master_Transmit>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	75fb      	strb	r3, [r7, #23]
			MPU6050_DEFAULT_TIMEOUT_VALUE);

	if (halI2CResult == HAL_TIMEOUT) {
 8002aa4:	7dfb      	ldrb	r3, [r7, #23]
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d104      	bne.n	8002ab4 <MPU6050SetSamplingRate+0x54>
		MPU6050ErrorOccured(TimeoutI2CInterface);
 8002aaa:	2004      	movs	r0, #4
 8002aac:	f000 fb18 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	e013      	b.n	8002adc <MPU6050SetSamplingRate+0x7c>
	} else if (halI2CResult == HAL_ERROR) {
 8002ab4:	7dfb      	ldrb	r3, [r7, #23]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d104      	bne.n	8002ac4 <MPU6050SetSamplingRate+0x64>
		MPU6050ErrorOccured(ErrorI2CInterface);
 8002aba:	2005      	movs	r0, #5
 8002abc:	f000 fb10 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e00b      	b.n	8002adc <MPU6050SetSamplingRate+0x7c>
	} else if (halI2CResult == HAL_BUSY) {
 8002ac4:	7dfb      	ldrb	r3, [r7, #23]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d104      	bne.n	8002ad4 <MPU6050SetSamplingRate+0x74>
		MPU6050ErrorOccured(BusyI2CInterface);
 8002aca:	2003      	movs	r0, #3
 8002acc:	f000 fb08 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	e003      	b.n	8002adc <MPU6050SetSamplingRate+0x7c>
	}

	// Assign Variables
	MPU6050Properties.srRate = sr;
 8002ad4:	4a03      	ldr	r2, [pc, #12]	; (8002ae4 <MPU6050SetSamplingRate+0x84>)
 8002ad6:	78fb      	ldrb	r3, [r7, #3]
 8002ad8:	70d3      	strb	r3, [r2, #3]

	return true;
 8002ada:	2301      	movs	r3, #1
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	20000094 	.word	0x20000094

08002ae8 <MPU6050EnableInterrupts>:

bool MPU6050EnableInterrupts(I2C_HandleTypeDef *I2Cx) {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af02      	add	r7, sp, #8
 8002aee:	6078      	str	r0, [r7, #4]

	if (MPU6050CheckProperties() == false)
 8002af0:	f000 fa28 	bl	8002f44 <MPU6050CheckProperties>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f083 0301 	eor.w	r3, r3, #1
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MPU6050EnableInterrupts+0x1c>
		return false;
 8002b00:	2300      	movs	r3, #0
 8002b02:	e0a9      	b.n	8002c58 <MPU6050EnableInterrupts+0x170>

	uint8_t i2c_buffer[8];
	uint8_t temp;
	i2c_buffer[0] = MPU6050_REGISTER_ADDR_INTERRUPT_ENABLE;
 8002b04:	2338      	movs	r3, #56	; 0x38
 8002b06:	733b      	strb	r3, [r7, #12]
	i2c_buffer[1] = 0x01;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	737b      	strb	r3, [r7, #13]

	HAL_StatusTypeDef halI2CResult;

	// Enable Interrupt
	halI2CResult = HAL_I2C_Master_Transmit(I2Cx, MPU6050Properties.I2CAddress,
 8002b0c:	4b54      	ldr	r3, [pc, #336]	; (8002c60 <MPU6050EnableInterrupts+0x178>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	b299      	uxth	r1, r3
 8002b12:	f107 020c 	add.w	r2, r7, #12
 8002b16:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7fe fb74 	bl	800120c <HAL_I2C_Master_Transmit>
 8002b24:	4603      	mov	r3, r0
 8002b26:	75fb      	strb	r3, [r7, #23]
			i2c_buffer, 2, MPU6050_DEFAULT_TIMEOUT_VALUE);
	if (halI2CResult == HAL_TIMEOUT) {
 8002b28:	7dfb      	ldrb	r3, [r7, #23]
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d104      	bne.n	8002b38 <MPU6050EnableInterrupts+0x50>
		MPU6050ErrorOccured(TimeoutI2CInterface);
 8002b2e:	2004      	movs	r0, #4
 8002b30:	f000 fad6 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002b34:	2300      	movs	r3, #0
 8002b36:	e08f      	b.n	8002c58 <MPU6050EnableInterrupts+0x170>
	} else if (halI2CResult == HAL_ERROR) {
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d104      	bne.n	8002b48 <MPU6050EnableInterrupts+0x60>
		MPU6050ErrorOccured(ErrorI2CInterface);
 8002b3e:	2005      	movs	r0, #5
 8002b40:	f000 face 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002b44:	2300      	movs	r3, #0
 8002b46:	e087      	b.n	8002c58 <MPU6050EnableInterrupts+0x170>
	} else if (halI2CResult == HAL_BUSY) {
 8002b48:	7dfb      	ldrb	r3, [r7, #23]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d104      	bne.n	8002b58 <MPU6050EnableInterrupts+0x70>
		MPU6050ErrorOccured(BusyI2CInterface);
 8002b4e:	2003      	movs	r0, #3
 8002b50:	f000 fac6 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002b54:	2300      	movs	r3, #0
 8002b56:	e07f      	b.n	8002c58 <MPU6050EnableInterrupts+0x170>
	}

	// Interrupt Configuration
	i2c_buffer[0] = MPU6050_REGISTER_ADDR_INTERRUPT_CONFIG;
 8002b58:	2337      	movs	r3, #55	; 0x37
 8002b5a:	733b      	strb	r3, [r7, #12]
	i2c_buffer[1] = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	737b      	strb	r3, [r7, #13]

	halI2CResult = HAL_I2C_Master_Transmit(I2Cx, MPU6050Properties.I2CAddress,
 8002b60:	4b3f      	ldr	r3, [pc, #252]	; (8002c60 <MPU6050EnableInterrupts+0x178>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	b299      	uxth	r1, r3
 8002b66:	f107 020c 	add.w	r2, r7, #12
 8002b6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	2301      	movs	r3, #1
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7fe fb4a 	bl	800120c <HAL_I2C_Master_Transmit>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	75fb      	strb	r3, [r7, #23]
			i2c_buffer, 1, MPU6050_DEFAULT_TIMEOUT_VALUE);
	if (halI2CResult == HAL_TIMEOUT) {
 8002b7c:	7dfb      	ldrb	r3, [r7, #23]
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d104      	bne.n	8002b8c <MPU6050EnableInterrupts+0xa4>
		MPU6050ErrorOccured(TimeoutI2CInterface);
 8002b82:	2004      	movs	r0, #4
 8002b84:	f000 faac 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	e065      	b.n	8002c58 <MPU6050EnableInterrupts+0x170>
	} else if (halI2CResult == HAL_ERROR) {
 8002b8c:	7dfb      	ldrb	r3, [r7, #23]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d104      	bne.n	8002b9c <MPU6050EnableInterrupts+0xb4>
		MPU6050ErrorOccured(ErrorI2CInterface);
 8002b92:	2005      	movs	r0, #5
 8002b94:	f000 faa4 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	e05d      	b.n	8002c58 <MPU6050EnableInterrupts+0x170>
	} else if (halI2CResult == HAL_BUSY) {
 8002b9c:	7dfb      	ldrb	r3, [r7, #23]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d104      	bne.n	8002bac <MPU6050EnableInterrupts+0xc4>
		MPU6050ErrorOccured(BusyI2CInterface);
 8002ba2:	2003      	movs	r0, #3
 8002ba4:	f000 fa9c 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	e055      	b.n	8002c58 <MPU6050EnableInterrupts+0x170>
	}

	halI2CResult = HAL_I2C_Master_Receive(I2Cx, MPU6050Properties.I2CAddress,
 8002bac:	4b2c      	ldr	r3, [pc, #176]	; (8002c60 <MPU6050EnableInterrupts+0x178>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	b299      	uxth	r1, r3
 8002bb2:	f107 020b 	add.w	r2, r7, #11
 8002bb6:	f241 3388 	movw	r3, #5000	; 0x1388
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fe fc22 	bl	8001408 <HAL_I2C_Master_Receive>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	75fb      	strb	r3, [r7, #23]
			&temp, 1, MPU6050_DEFAULT_TIMEOUT_VALUE);
	if (halI2CResult == HAL_TIMEOUT) {
 8002bc8:	7dfb      	ldrb	r3, [r7, #23]
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d104      	bne.n	8002bd8 <MPU6050EnableInterrupts+0xf0>
		MPU6050ErrorOccured(TimeoutI2CInterface);
 8002bce:	2004      	movs	r0, #4
 8002bd0:	f000 fa86 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e03f      	b.n	8002c58 <MPU6050EnableInterrupts+0x170>
	} else if (halI2CResult == HAL_ERROR) {
 8002bd8:	7dfb      	ldrb	r3, [r7, #23]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d104      	bne.n	8002be8 <MPU6050EnableInterrupts+0x100>
		MPU6050ErrorOccured(ErrorI2CInterface);
 8002bde:	2005      	movs	r0, #5
 8002be0:	f000 fa7e 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002be4:	2300      	movs	r3, #0
 8002be6:	e037      	b.n	8002c58 <MPU6050EnableInterrupts+0x170>
	} else if (halI2CResult == HAL_BUSY) {
 8002be8:	7dfb      	ldrb	r3, [r7, #23]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d104      	bne.n	8002bf8 <MPU6050EnableInterrupts+0x110>
		MPU6050ErrorOccured(BusyI2CInterface);
 8002bee:	2003      	movs	r0, #3
 8002bf0:	f000 fa76 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	e02f      	b.n	8002c58 <MPU6050EnableInterrupts+0x170>
	}

	temp |= 0x10;
 8002bf8:	7afb      	ldrb	r3, [r7, #11]
 8002bfa:	f043 0310 	orr.w	r3, r3, #16
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	72fb      	strb	r3, [r7, #11]
	i2c_buffer[0] = MPU6050_REGISTER_ADDR_INTERRUPT_CONFIG;
 8002c02:	2337      	movs	r3, #55	; 0x37
 8002c04:	733b      	strb	r3, [r7, #12]
	i2c_buffer[1] = temp;
 8002c06:	7afb      	ldrb	r3, [r7, #11]
 8002c08:	737b      	strb	r3, [r7, #13]
	halI2CResult = HAL_I2C_Master_Receive(I2Cx, MPU6050Properties.I2CAddress,
 8002c0a:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <MPU6050EnableInterrupts+0x178>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	b299      	uxth	r1, r3
 8002c10:	f107 020c 	add.w	r2, r7, #12
 8002c14:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7fe fbf3 	bl	8001408 <HAL_I2C_Master_Receive>
 8002c22:	4603      	mov	r3, r0
 8002c24:	75fb      	strb	r3, [r7, #23]
			i2c_buffer, 2, MPU6050_DEFAULT_TIMEOUT_VALUE);
	if (halI2CResult == HAL_TIMEOUT) {
 8002c26:	7dfb      	ldrb	r3, [r7, #23]
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d104      	bne.n	8002c36 <MPU6050EnableInterrupts+0x14e>
		MPU6050ErrorOccured(TimeoutI2CInterface);
 8002c2c:	2004      	movs	r0, #4
 8002c2e:	f000 fa57 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002c32:	2300      	movs	r3, #0
 8002c34:	e010      	b.n	8002c58 <MPU6050EnableInterrupts+0x170>
	} else if (halI2CResult == HAL_ERROR) {
 8002c36:	7dfb      	ldrb	r3, [r7, #23]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d104      	bne.n	8002c46 <MPU6050EnableInterrupts+0x15e>
		MPU6050ErrorOccured(ErrorI2CInterface);
 8002c3c:	2005      	movs	r0, #5
 8002c3e:	f000 fa4f 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002c42:	2300      	movs	r3, #0
 8002c44:	e008      	b.n	8002c58 <MPU6050EnableInterrupts+0x170>
	} else if (halI2CResult == HAL_BUSY) {
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d104      	bne.n	8002c56 <MPU6050EnableInterrupts+0x16e>
		MPU6050ErrorOccured(BusyI2CInterface);
 8002c4c:	2003      	movs	r0, #3
 8002c4e:	f000 fa47 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e000      	b.n	8002c58 <MPU6050EnableInterrupts+0x170>
	}

	return true;
 8002c56:	2301      	movs	r3, #1
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20000094 	.word	0x20000094

08002c64 <MPU6050Init>:

bool MPU6050Init(I2C_HandleTypeDef *I2Cx, MPU6050_AccRange accRange,
		MPU6050_GyroRange gyroRange, MPU6050_SamplingRate sr) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	4608      	mov	r0, r1
 8002c6e:	4611      	mov	r1, r2
 8002c70:	461a      	mov	r2, r3
 8002c72:	4603      	mov	r3, r0
 8002c74:	70fb      	strb	r3, [r7, #3]
 8002c76:	460b      	mov	r3, r1
 8002c78:	70bb      	strb	r3, [r7, #2]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	707b      	strb	r3, [r7, #1]

	// Reset All Variables
	MPU6050Properties.I2CAddress = 0xD0;
 8002c7e:	4b41      	ldr	r3, [pc, #260]	; (8002d84 <MPU6050Init+0x120>)
 8002c80:	22d0      	movs	r2, #208	; 0xd0
 8002c82:	701a      	strb	r2, [r3, #0]

	MPU6050ErrorProperties.errorCode = NoError;
 8002c84:	4b40      	ldr	r3, [pc, #256]	; (8002d88 <MPU6050Init+0x124>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
	MPU6050ErrorProperties.errorString = MPU6050_ERROR_STRING[NoError];
 8002c8a:	4b40      	ldr	r3, [pc, #256]	; (8002d8c <MPU6050Init+0x128>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a3e      	ldr	r2, [pc, #248]	; (8002d88 <MPU6050Init+0x124>)
 8002c90:	6053      	str	r3, [r2, #4]

	MPU6050Properties.xRawAccValue = 0;
 8002c92:	4b3c      	ldr	r3, [pc, #240]	; (8002d84 <MPU6050Init+0x120>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	809a      	strh	r2, [r3, #4]
	MPU6050Properties.yRawAccValue = 0;
 8002c98:	4b3a      	ldr	r3, [pc, #232]	; (8002d84 <MPU6050Init+0x120>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	80da      	strh	r2, [r3, #6]
	MPU6050Properties.zRawAccValue = 0;
 8002c9e:	4b39      	ldr	r3, [pc, #228]	; (8002d84 <MPU6050Init+0x120>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	811a      	strh	r2, [r3, #8]

	MPU6050Properties.xRawGyroValue = 0;
 8002ca4:	4b37      	ldr	r3, [pc, #220]	; (8002d84 <MPU6050Init+0x120>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	815a      	strh	r2, [r3, #10]
	MPU6050Properties.yRawGyroValue = 0;
 8002caa:	4b36      	ldr	r3, [pc, #216]	; (8002d84 <MPU6050Init+0x120>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	819a      	strh	r2, [r3, #12]
	MPU6050Properties.zRawGyroValue = 0;
 8002cb0:	4b34      	ldr	r3, [pc, #208]	; (8002d84 <MPU6050Init+0x120>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	81da      	strh	r2, [r3, #14]

	MPU6050Properties.xAccValue = 0.0;
 8002cb6:	4b33      	ldr	r3, [pc, #204]	; (8002d84 <MPU6050Init+0x120>)
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	619a      	str	r2, [r3, #24]
	MPU6050Properties.yAccValue = 0.0;
 8002cbe:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <MPU6050Init+0x120>)
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	61da      	str	r2, [r3, #28]
	MPU6050Properties.zAccValue = 0.0;
 8002cc6:	4b2f      	ldr	r3, [pc, #188]	; (8002d84 <MPU6050Init+0x120>)
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	621a      	str	r2, [r3, #32]

	MPU6050Properties.xGyroValue = 0.0;
 8002cce:	4b2d      	ldr	r3, [pc, #180]	; (8002d84 <MPU6050Init+0x120>)
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24
	MPU6050Properties.yGyroValue = 0.0;
 8002cd6:	4b2b      	ldr	r3, [pc, #172]	; (8002d84 <MPU6050Init+0x120>)
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	629a      	str	r2, [r3, #40]	; 0x28
	MPU6050Properties.zGyroValue = 0.0;
 8002cde:	4b29      	ldr	r3, [pc, #164]	; (8002d84 <MPU6050Init+0x120>)
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	62da      	str	r2, [r3, #44]	; 0x2c

	if (MPU6050FindDevice(I2Cx, 0, 255) == false)
 8002ce6:	22ff      	movs	r2, #255	; 0xff
 8002ce8:	2100      	movs	r1, #0
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f8fe 	bl	8002eec <MPU6050FindDevice>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f083 0301 	eor.w	r3, r3, #1
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <MPU6050Init+0x9c>
		return false;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e03d      	b.n	8002d7c <MPU6050Init+0x118>

	if (MPU6050WakeUpSensor(I2Cx) == false)
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff fde1 	bl	80028c8 <MPU6050WakeUpSensor>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f083 0301 	eor.w	r3, r3, #1
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <MPU6050Init+0xb2>
		return false;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e032      	b.n	8002d7c <MPU6050Init+0x118>

	if (MPU6050SetAccelerometerRange(I2Cx, accRange) == false)
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff fe14 	bl	8002948 <MPU6050SetAccelerometerRange>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f083 0301 	eor.w	r3, r3, #1
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MPU6050Init+0xcc>
		return false;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e025      	b.n	8002d7c <MPU6050Init+0x118>

	if (MPU6050SetGyroRange(I2Cx, gyroRange) == false)
 8002d30:	78bb      	ldrb	r3, [r7, #2]
 8002d32:	4619      	mov	r1, r3
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7ff fe4d 	bl	80029d4 <MPU6050SetGyroRange>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f083 0301 	eor.w	r3, r3, #1
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MPU6050Init+0xe6>
		return false;
 8002d46:	2300      	movs	r3, #0
 8002d48:	e018      	b.n	8002d7c <MPU6050Init+0x118>

	if (MPU6050SetSamplingRate(I2Cx, sr) == false)
 8002d4a:	787b      	ldrb	r3, [r7, #1]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7ff fe86 	bl	8002a60 <MPU6050SetSamplingRate>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f083 0301 	eor.w	r3, r3, #1
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <MPU6050Init+0x100>
		return false;
 8002d60:	2300      	movs	r3, #0
 8002d62:	e00b      	b.n	8002d7c <MPU6050Init+0x118>

	if (MPU6050EnableInterrupts(I2Cx) == false)
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff febf 	bl	8002ae8 <MPU6050EnableInterrupts>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	f083 0301 	eor.w	r3, r3, #1
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MPU6050Init+0x116>
		return false;
 8002d76:	2300      	movs	r3, #0
 8002d78:	e000      	b.n	8002d7c <MPU6050Init+0x118>

	return true;
 8002d7a:	2301      	movs	r3, #1
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20000094 	.word	0x20000094
 8002d88:	200000c4 	.word	0x200000c4
 8002d8c:	2000000c 	.word	0x2000000c

08002d90 <MPU6050ReadAccelValues>:

bool MPU6050ReadAccelValues(I2C_HandleTypeDef *I2Cx) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	6078      	str	r0, [r7, #4]
	if (MPU6050CheckProperties() == false)
 8002d98:	f000 f8d4 	bl	8002f44 <MPU6050CheckProperties>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f083 0301 	eor.w	r3, r3, #1
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <MPU6050ReadAccelValues+0x1c>
		return false;
 8002da8:	2300      	movs	r3, #0
 8002daa:	e099      	b.n	8002ee0 <MPU6050ReadAccelValues+0x150>
	HAL_StatusTypeDef halI2CResult;
	uint8_t i2c_buffer[15];

	// Read Accelerometer Data
	// Request to read
	i2c_buffer[0] = MPU6050_REGISTER_ADDR_ACCEL_XOUT_H;
 8002dac:	233b      	movs	r3, #59	; 0x3b
 8002dae:	723b      	strb	r3, [r7, #8]
	halI2CResult = HAL_I2C_Master_Transmit(I2Cx, MPU6050Properties.I2CAddress,
 8002db0:	4b4d      	ldr	r3, [pc, #308]	; (8002ee8 <MPU6050ReadAccelValues+0x158>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	b299      	uxth	r1, r3
 8002db6:	f107 0208 	add.w	r2, r7, #8
 8002dba:	f241 3388 	movw	r3, #5000	; 0x1388
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7fe fa22 	bl	800120c <HAL_I2C_Master_Transmit>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	75fb      	strb	r3, [r7, #23]
			i2c_buffer, 1, MPU6050_DEFAULT_TIMEOUT_VALUE);
	if (halI2CResult == HAL_TIMEOUT) {
 8002dcc:	7dfb      	ldrb	r3, [r7, #23]
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d104      	bne.n	8002ddc <MPU6050ReadAccelValues+0x4c>
		MPU6050ErrorOccured(TimeoutI2CInterface);
 8002dd2:	2004      	movs	r0, #4
 8002dd4:	f000 f984 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e081      	b.n	8002ee0 <MPU6050ReadAccelValues+0x150>
	} else if (halI2CResult == HAL_ERROR) {
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d104      	bne.n	8002dec <MPU6050ReadAccelValues+0x5c>
		MPU6050ErrorOccured(ErrorI2CInterface);
 8002de2:	2005      	movs	r0, #5
 8002de4:	f000 f97c 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002de8:	2300      	movs	r3, #0
 8002dea:	e079      	b.n	8002ee0 <MPU6050ReadAccelValues+0x150>
	} else if (halI2CResult == HAL_BUSY) {
 8002dec:	7dfb      	ldrb	r3, [r7, #23]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d104      	bne.n	8002dfc <MPU6050ReadAccelValues+0x6c>
		MPU6050ErrorOccured(BusyI2CInterface);
 8002df2:	2003      	movs	r0, #3
 8002df4:	f000 f974 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e071      	b.n	8002ee0 <MPU6050ReadAccelValues+0x150>
	}

	// Read Data
	i2c_buffer[1] = 0x00;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	727b      	strb	r3, [r7, #9]
	halI2CResult = HAL_I2C_Master_Receive(I2Cx, MPU6050Properties.I2CAddress,
 8002e00:	4b39      	ldr	r3, [pc, #228]	; (8002ee8 <MPU6050ReadAccelValues+0x158>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	b299      	uxth	r1, r3
 8002e06:	f107 0308 	add.w	r3, r7, #8
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	230e      	movs	r3, #14
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7fe faf7 	bl	8001408 <HAL_I2C_Master_Receive>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	75fb      	strb	r3, [r7, #23]
			&i2c_buffer[1], 14, MPU6050_DEFAULT_TIMEOUT_VALUE);
	if (halI2CResult == HAL_TIMEOUT) {
 8002e1e:	7dfb      	ldrb	r3, [r7, #23]
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d104      	bne.n	8002e2e <MPU6050ReadAccelValues+0x9e>
		MPU6050ErrorOccured(TimeoutI2CInterface);
 8002e24:	2004      	movs	r0, #4
 8002e26:	f000 f95b 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e058      	b.n	8002ee0 <MPU6050ReadAccelValues+0x150>
	} else if (halI2CResult == HAL_ERROR) {
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d104      	bne.n	8002e3e <MPU6050ReadAccelValues+0xae>
		MPU6050ErrorOccured(ErrorI2CInterface);
 8002e34:	2005      	movs	r0, #5
 8002e36:	f000 f953 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e050      	b.n	8002ee0 <MPU6050ReadAccelValues+0x150>
	} else if (halI2CResult == HAL_BUSY) {
 8002e3e:	7dfb      	ldrb	r3, [r7, #23]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d104      	bne.n	8002e4e <MPU6050ReadAccelValues+0xbe>
		MPU6050ErrorOccured(BusyI2CInterface);
 8002e44:	2003      	movs	r0, #3
 8002e46:	f000 f94b 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e048      	b.n	8002ee0 <MPU6050ReadAccelValues+0x150>
	}

	MPU6050Properties.xRawAccValue = (i2c_buffer[1] << 8 | i2c_buffer[2]);
 8002e4e:	7a7b      	ldrb	r3, [r7, #9]
 8002e50:	021b      	lsls	r3, r3, #8
 8002e52:	b21a      	sxth	r2, r3
 8002e54:	7abb      	ldrb	r3, [r7, #10]
 8002e56:	b21b      	sxth	r3, r3
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	b21b      	sxth	r3, r3
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	4b22      	ldr	r3, [pc, #136]	; (8002ee8 <MPU6050ReadAccelValues+0x158>)
 8002e60:	809a      	strh	r2, [r3, #4]
	MPU6050Properties.yRawAccValue = (i2c_buffer[3] << 8 | i2c_buffer[4]);
 8002e62:	7afb      	ldrb	r3, [r7, #11]
 8002e64:	021b      	lsls	r3, r3, #8
 8002e66:	b21a      	sxth	r2, r3
 8002e68:	7b3b      	ldrb	r3, [r7, #12]
 8002e6a:	b21b      	sxth	r3, r3
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	b21b      	sxth	r3, r3
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <MPU6050ReadAccelValues+0x158>)
 8002e74:	80da      	strh	r2, [r3, #6]
	MPU6050Properties.zRawAccValue = (i2c_buffer[5] << 8 | i2c_buffer[6]);
 8002e76:	7b7b      	ldrb	r3, [r7, #13]
 8002e78:	021b      	lsls	r3, r3, #8
 8002e7a:	b21a      	sxth	r2, r3
 8002e7c:	7bbb      	ldrb	r3, [r7, #14]
 8002e7e:	b21b      	sxth	r3, r3
 8002e80:	4313      	orrs	r3, r2
 8002e82:	b21b      	sxth	r3, r3
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	4b18      	ldr	r3, [pc, #96]	; (8002ee8 <MPU6050ReadAccelValues+0x158>)
 8002e88:	811a      	strh	r2, [r3, #8]

	MPU6050Properties.xRawGyroValue = (i2c_buffer[9] << 8 | i2c_buffer[10]);
 8002e8a:	7c7b      	ldrb	r3, [r7, #17]
 8002e8c:	021b      	lsls	r3, r3, #8
 8002e8e:	b21a      	sxth	r2, r3
 8002e90:	7cbb      	ldrb	r3, [r7, #18]
 8002e92:	b21b      	sxth	r3, r3
 8002e94:	4313      	orrs	r3, r2
 8002e96:	b21b      	sxth	r3, r3
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <MPU6050ReadAccelValues+0x158>)
 8002e9c:	815a      	strh	r2, [r3, #10]
	MPU6050Properties.yRawGyroValue = (i2c_buffer[11] << 8 | i2c_buffer[12]);
 8002e9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ea0:	021b      	lsls	r3, r3, #8
 8002ea2:	b21a      	sxth	r2, r3
 8002ea4:	7d3b      	ldrb	r3, [r7, #20]
 8002ea6:	b21b      	sxth	r3, r3
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	b21b      	sxth	r3, r3
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <MPU6050ReadAccelValues+0x158>)
 8002eb0:	819a      	strh	r2, [r3, #12]
	MPU6050Properties.zRawGyroValue = (i2c_buffer[13] << 8 | i2c_buffer[14]);
 8002eb2:	7d7b      	ldrb	r3, [r7, #21]
 8002eb4:	021b      	lsls	r3, r3, #8
 8002eb6:	b21a      	sxth	r2, r3
 8002eb8:	7dbb      	ldrb	r3, [r7, #22]
 8002eba:	b21b      	sxth	r3, r3
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	b21b      	sxth	r3, r3
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <MPU6050ReadAccelValues+0x158>)
 8002ec4:	81da      	strh	r2, [r3, #14]

	MPU6050Properties.rawTempValue = (i2c_buffer[7] << 8 | i2c_buffer[8]);
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
 8002ec8:	021b      	lsls	r3, r3, #8
 8002eca:	b21a      	sxth	r2, r3
 8002ecc:	7c3b      	ldrb	r3, [r7, #16]
 8002ece:	b21b      	sxth	r3, r3
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	b21b      	sxth	r3, r3
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <MPU6050ReadAccelValues+0x158>)
 8002ed8:	821a      	strh	r2, [r3, #16]

	MPU6050CalibrateData();
 8002eda:	f000 f843 	bl	8002f64 <MPU6050CalibrateData>

	return true;
 8002ede:	2301      	movs	r3, #1
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000094 	.word	0x20000094

08002eec <MPU6050FindDevice>:
//**************** MPU6050 CODES ****************//

//**************** UTILS CODES ****************//

bool MPU6050FindDevice(I2C_HandleTypeDef *I2Cx, uint8_t startAddr,
		uint8_t endAddr) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	70fb      	strb	r3, [r7, #3]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	70bb      	strb	r3, [r7, #2]
	// Detect Address MPU6050
	for (uint8_t i = 0; i < 255; ++i) {
 8002efc:	2300      	movs	r3, #0
 8002efe:	73fb      	strb	r3, [r7, #15]
 8002f00:	e012      	b.n	8002f28 <MPU6050FindDevice+0x3c>
		if (HAL_I2C_IsDeviceReady(I2Cx, i, 1, MPU6050_DEFAULT_TIMEOUT_VALUE)
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	b299      	uxth	r1, r3
 8002f06:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7fe fca9 	bl	8001864 <HAL_I2C_IsDeviceReady>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d104      	bne.n	8002f22 <MPU6050FindDevice+0x36>
				== HAL_OK) {
			MPU6050Properties.I2CAddress = i;
 8002f18:	4a09      	ldr	r2, [pc, #36]	; (8002f40 <MPU6050FindDevice+0x54>)
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	7013      	strb	r3, [r2, #0]
			return true;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e009      	b.n	8002f36 <MPU6050FindDevice+0x4a>
	for (uint8_t i = 0; i < 255; ++i) {
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	3301      	adds	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	2bff      	cmp	r3, #255	; 0xff
 8002f2c:	d1e9      	bne.n	8002f02 <MPU6050FindDevice+0x16>
		}
	}

	MPU6050ErrorOccured(UninitAddr);
 8002f2e:	2001      	movs	r0, #1
 8002f30:	f000 f8d6 	bl	80030e0 <MPU6050ErrorOccured>
	return false;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000094 	.word	0x20000094

08002f44 <MPU6050CheckProperties>:

bool MPU6050CheckProperties() {
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
	if (MPU6050Properties.I2CAddress == 0) {
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <MPU6050CheckProperties+0x1c>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d104      	bne.n	8002f5a <MPU6050CheckProperties+0x16>
		MPU6050ErrorOccured(UninitAddr);
 8002f50:	2001      	movs	r0, #1
 8002f52:	f000 f8c5 	bl	80030e0 <MPU6050ErrorOccured>
		return false;
 8002f56:	2300      	movs	r3, #0
 8002f58:	e000      	b.n	8002f5c <MPU6050CheckProperties+0x18>
	}

	return true;
 8002f5a:	2301      	movs	r3, #1
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20000094 	.word	0x20000094

08002f64 <MPU6050CalibrateData>:

void MPU6050CalibrateData() {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
	float accCalibValue = 0.0f, gyroCalibValue = 0.0f;
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	607b      	str	r3, [r7, #4]
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	603b      	str	r3, [r7, #0]

	switch (MPU6050Properties.accRange) {
 8002f76:	4b53      	ldr	r3, [pc, #332]	; (80030c4 <MPU6050CalibrateData+0x160>)
 8002f78:	785b      	ldrb	r3, [r3, #1]
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d81a      	bhi.n	8002fb4 <MPU6050CalibrateData+0x50>
 8002f7e:	a201      	add	r2, pc, #4	; (adr r2, 8002f84 <MPU6050CalibrateData+0x20>)
 8002f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f84:	08002f95 	.word	0x08002f95
 8002f88:	08002f9d 	.word	0x08002f9d
 8002f8c:	08002fa5 	.word	0x08002fa5
 8002f90:	08002fad 	.word	0x08002fad
	case AR2:
		accCalibValue = 16384.0f;
 8002f94:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 8002f98:	607b      	str	r3, [r7, #4]
		break;
 8002f9a:	e00b      	b.n	8002fb4 <MPU6050CalibrateData+0x50>
	case AR4:
		accCalibValue = 8192.0f;
 8002f9c:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 8002fa0:	607b      	str	r3, [r7, #4]
		break;
 8002fa2:	e007      	b.n	8002fb4 <MPU6050CalibrateData+0x50>
	case AR8:
		accCalibValue = 4096.0f;
 8002fa4:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8002fa8:	607b      	str	r3, [r7, #4]
		break;
 8002faa:	e003      	b.n	8002fb4 <MPU6050CalibrateData+0x50>
	case AR16:
		accCalibValue = 2048.0f;
 8002fac:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8002fb0:	607b      	str	r3, [r7, #4]
		break;
 8002fb2:	bf00      	nop
	}

	switch (MPU6050Properties.gyroRange) {
 8002fb4:	4b43      	ldr	r3, [pc, #268]	; (80030c4 <MPU6050CalibrateData+0x160>)
 8002fb6:	789b      	ldrb	r3, [r3, #2]
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d817      	bhi.n	8002fec <MPU6050CalibrateData+0x88>
 8002fbc:	a201      	add	r2, pc, #4	; (adr r2, 8002fc4 <MPU6050CalibrateData+0x60>)
 8002fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc2:	bf00      	nop
 8002fc4:	08002fd5 	.word	0x08002fd5
 8002fc8:	08002fdb 	.word	0x08002fdb
 8002fcc:	08002fe1 	.word	0x08002fe1
 8002fd0:	08002fe7 	.word	0x08002fe7
	case GR250:
		gyroCalibValue = 131.0f;
 8002fd4:	4b3c      	ldr	r3, [pc, #240]	; (80030c8 <MPU6050CalibrateData+0x164>)
 8002fd6:	603b      	str	r3, [r7, #0]
		break;
 8002fd8:	e008      	b.n	8002fec <MPU6050CalibrateData+0x88>
	case GR500:
		gyroCalibValue = 65.5f;
 8002fda:	4b3c      	ldr	r3, [pc, #240]	; (80030cc <MPU6050CalibrateData+0x168>)
 8002fdc:	603b      	str	r3, [r7, #0]
		break;
 8002fde:	e005      	b.n	8002fec <MPU6050CalibrateData+0x88>
	case GR1000:
		gyroCalibValue = 32.8f;
 8002fe0:	4b3b      	ldr	r3, [pc, #236]	; (80030d0 <MPU6050CalibrateData+0x16c>)
 8002fe2:	603b      	str	r3, [r7, #0]
		break;
 8002fe4:	e002      	b.n	8002fec <MPU6050CalibrateData+0x88>
	case GR2000:
		gyroCalibValue = 16.4f;
 8002fe6:	4b3b      	ldr	r3, [pc, #236]	; (80030d4 <MPU6050CalibrateData+0x170>)
 8002fe8:	603b      	str	r3, [r7, #0]
		break;
 8002fea:	bf00      	nop
	}

	MPU6050Properties.xAccValue = MPU6050Properties.xRawAccValue
 8002fec:	4b35      	ldr	r3, [pc, #212]	; (80030c4 <MPU6050CalibrateData+0x160>)
 8002fee:	889b      	ldrh	r3, [r3, #4]
			/ accCalibValue;
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fd f965 	bl	80002c0 <__aeabi_i2f>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd fa68 	bl	80004d0 <__aeabi_fdiv>
 8003000:	4603      	mov	r3, r0
 8003002:	461a      	mov	r2, r3
	MPU6050Properties.xAccValue = MPU6050Properties.xRawAccValue
 8003004:	4b2f      	ldr	r3, [pc, #188]	; (80030c4 <MPU6050CalibrateData+0x160>)
 8003006:	619a      	str	r2, [r3, #24]
	MPU6050Properties.yAccValue = MPU6050Properties.yRawAccValue
 8003008:	4b2e      	ldr	r3, [pc, #184]	; (80030c4 <MPU6050CalibrateData+0x160>)
 800300a:	88db      	ldrh	r3, [r3, #6]
			/ accCalibValue;
 800300c:	4618      	mov	r0, r3
 800300e:	f7fd f957 	bl	80002c0 <__aeabi_i2f>
 8003012:	4603      	mov	r3, r0
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4618      	mov	r0, r3
 8003018:	f7fd fa5a 	bl	80004d0 <__aeabi_fdiv>
 800301c:	4603      	mov	r3, r0
 800301e:	461a      	mov	r2, r3
	MPU6050Properties.yAccValue = MPU6050Properties.yRawAccValue
 8003020:	4b28      	ldr	r3, [pc, #160]	; (80030c4 <MPU6050CalibrateData+0x160>)
 8003022:	61da      	str	r2, [r3, #28]
	MPU6050Properties.zAccValue = MPU6050Properties.zRawAccValue
 8003024:	4b27      	ldr	r3, [pc, #156]	; (80030c4 <MPU6050CalibrateData+0x160>)
 8003026:	891b      	ldrh	r3, [r3, #8]
			/ accCalibValue;
 8003028:	4618      	mov	r0, r3
 800302a:	f7fd f949 	bl	80002c0 <__aeabi_i2f>
 800302e:	4603      	mov	r3, r0
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4618      	mov	r0, r3
 8003034:	f7fd fa4c 	bl	80004d0 <__aeabi_fdiv>
 8003038:	4603      	mov	r3, r0
 800303a:	461a      	mov	r2, r3
	MPU6050Properties.zAccValue = MPU6050Properties.zRawAccValue
 800303c:	4b21      	ldr	r3, [pc, #132]	; (80030c4 <MPU6050CalibrateData+0x160>)
 800303e:	621a      	str	r2, [r3, #32]

	MPU6050Properties.xGyroValue = MPU6050Properties.xRawGyroValue
 8003040:	4b20      	ldr	r3, [pc, #128]	; (80030c4 <MPU6050CalibrateData+0x160>)
 8003042:	895b      	ldrh	r3, [r3, #10]
			/ gyroCalibValue;
 8003044:	4618      	mov	r0, r3
 8003046:	f7fd f93b 	bl	80002c0 <__aeabi_i2f>
 800304a:	4603      	mov	r3, r0
 800304c:	6839      	ldr	r1, [r7, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f7fd fa3e 	bl	80004d0 <__aeabi_fdiv>
 8003054:	4603      	mov	r3, r0
 8003056:	461a      	mov	r2, r3
	MPU6050Properties.xGyroValue = MPU6050Properties.xRawGyroValue
 8003058:	4b1a      	ldr	r3, [pc, #104]	; (80030c4 <MPU6050CalibrateData+0x160>)
 800305a:	625a      	str	r2, [r3, #36]	; 0x24
	MPU6050Properties.yGyroValue = MPU6050Properties.yRawGyroValue
 800305c:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <MPU6050CalibrateData+0x160>)
 800305e:	899b      	ldrh	r3, [r3, #12]
			/ gyroCalibValue;
 8003060:	4618      	mov	r0, r3
 8003062:	f7fd f92d 	bl	80002c0 <__aeabi_i2f>
 8003066:	4603      	mov	r3, r0
 8003068:	6839      	ldr	r1, [r7, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fd fa30 	bl	80004d0 <__aeabi_fdiv>
 8003070:	4603      	mov	r3, r0
 8003072:	461a      	mov	r2, r3
	MPU6050Properties.yGyroValue = MPU6050Properties.yRawGyroValue
 8003074:	4b13      	ldr	r3, [pc, #76]	; (80030c4 <MPU6050CalibrateData+0x160>)
 8003076:	629a      	str	r2, [r3, #40]	; 0x28
	MPU6050Properties.zGyroValue = MPU6050Properties.zRawGyroValue
 8003078:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <MPU6050CalibrateData+0x160>)
 800307a:	89db      	ldrh	r3, [r3, #14]
			/ gyroCalibValue;
 800307c:	4618      	mov	r0, r3
 800307e:	f7fd f91f 	bl	80002c0 <__aeabi_i2f>
 8003082:	4603      	mov	r3, r0
 8003084:	6839      	ldr	r1, [r7, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7fd fa22 	bl	80004d0 <__aeabi_fdiv>
 800308c:	4603      	mov	r3, r0
 800308e:	461a      	mov	r2, r3
	MPU6050Properties.zGyroValue = MPU6050Properties.zRawGyroValue
 8003090:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <MPU6050CalibrateData+0x160>)
 8003092:	62da      	str	r2, [r3, #44]	; 0x2c

	MPU6050Properties.tempValue = -(MPU6050Properties.rawTempValue / 340.0f)
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <MPU6050CalibrateData+0x160>)
 8003096:	8a1b      	ldrh	r3, [r3, #16]
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd f911 	bl	80002c0 <__aeabi_i2f>
 800309e:	4603      	mov	r3, r0
 80030a0:	490d      	ldr	r1, [pc, #52]	; (80030d8 <MPU6050CalibrateData+0x174>)
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd fa14 	bl	80004d0 <__aeabi_fdiv>
 80030a8:	4603      	mov	r3, r0
			+ 36.53f;
 80030aa:	4619      	mov	r1, r3
 80030ac:	480b      	ldr	r0, [pc, #44]	; (80030dc <MPU6050CalibrateData+0x178>)
 80030ae:	f7fd f851 	bl	8000154 <__aeabi_fsub>
 80030b2:	4603      	mov	r3, r0
 80030b4:	461a      	mov	r2, r3
	MPU6050Properties.tempValue = -(MPU6050Properties.rawTempValue / 340.0f)
 80030b6:	4b03      	ldr	r3, [pc, #12]	; (80030c4 <MPU6050CalibrateData+0x160>)
 80030b8:	615a      	str	r2, [r3, #20]
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000094 	.word	0x20000094
 80030c8:	43030000 	.word	0x43030000
 80030cc:	42830000 	.word	0x42830000
 80030d0:	42033333 	.word	0x42033333
 80030d4:	41833333 	.word	0x41833333
 80030d8:	43aa0000 	.word	0x43aa0000
 80030dc:	42121eb8 	.word	0x42121eb8

080030e0 <MPU6050ErrorOccured>:

//**************** UTILS CODES ****************//

//**************** ERROR CODES ****************//

void MPU6050ErrorOccured(MPU6050_ErrorCode errorCode) {
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	71fb      	strb	r3, [r7, #7]
	MPU6050ErrorProperties.errorCode = errorCode;
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	4a06      	ldr	r2, [pc, #24]	; (8003108 <MPU6050ErrorOccured+0x28>)
 80030ee:	6013      	str	r3, [r2, #0]
	MPU6050ErrorProperties.errorString = MPU6050_ERROR_STRING[errorCode];
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	4a06      	ldr	r2, [pc, #24]	; (800310c <MPU6050ErrorOccured+0x2c>)
 80030f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f8:	4a03      	ldr	r2, [pc, #12]	; (8003108 <MPU6050ErrorOccured+0x28>)
 80030fa:	6053      	str	r3, [r2, #4]
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	200000c4 	.word	0x200000c4
 800310c:	2000000c 	.word	0x2000000c

08003110 <__libc_init_array>:
 8003110:	b570      	push	{r4, r5, r6, lr}
 8003112:	2500      	movs	r5, #0
 8003114:	4e0c      	ldr	r6, [pc, #48]	; (8003148 <__libc_init_array+0x38>)
 8003116:	4c0d      	ldr	r4, [pc, #52]	; (800314c <__libc_init_array+0x3c>)
 8003118:	1ba4      	subs	r4, r4, r6
 800311a:	10a4      	asrs	r4, r4, #2
 800311c:	42a5      	cmp	r5, r4
 800311e:	d109      	bne.n	8003134 <__libc_init_array+0x24>
 8003120:	f000 f822 	bl	8003168 <_init>
 8003124:	2500      	movs	r5, #0
 8003126:	4e0a      	ldr	r6, [pc, #40]	; (8003150 <__libc_init_array+0x40>)
 8003128:	4c0a      	ldr	r4, [pc, #40]	; (8003154 <__libc_init_array+0x44>)
 800312a:	1ba4      	subs	r4, r4, r6
 800312c:	10a4      	asrs	r4, r4, #2
 800312e:	42a5      	cmp	r5, r4
 8003130:	d105      	bne.n	800313e <__libc_init_array+0x2e>
 8003132:	bd70      	pop	{r4, r5, r6, pc}
 8003134:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003138:	4798      	blx	r3
 800313a:	3501      	adds	r5, #1
 800313c:	e7ee      	b.n	800311c <__libc_init_array+0xc>
 800313e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003142:	4798      	blx	r3
 8003144:	3501      	adds	r5, #1
 8003146:	e7f2      	b.n	800312e <__libc_init_array+0x1e>
 8003148:	08003268 	.word	0x08003268
 800314c:	08003268 	.word	0x08003268
 8003150:	08003268 	.word	0x08003268
 8003154:	0800326c 	.word	0x0800326c

08003158 <memset>:
 8003158:	4603      	mov	r3, r0
 800315a:	4402      	add	r2, r0
 800315c:	4293      	cmp	r3, r2
 800315e:	d100      	bne.n	8003162 <memset+0xa>
 8003160:	4770      	bx	lr
 8003162:	f803 1b01 	strb.w	r1, [r3], #1
 8003166:	e7f9      	b.n	800315c <memset+0x4>

08003168 <_init>:
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316a:	bf00      	nop
 800316c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316e:	bc08      	pop	{r3}
 8003170:	469e      	mov	lr, r3
 8003172:	4770      	bx	lr

08003174 <_fini>:
 8003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003176:	bf00      	nop
 8003178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317a:	bc08      	pop	{r3}
 800317c:	469e      	mov	lr, r3
 800317e:	4770      	bx	lr
